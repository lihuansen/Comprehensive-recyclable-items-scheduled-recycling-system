@model recycling.Model.StaffLoginViewModel

<form id="staffLoginForm" action="@Url.Action("Login", "Staff")" method="post">
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="staffUsername">工作人员账号</label>
        <input type="text" class="form-control" id="staffUsername" name="Username"
               placeholder="请输入工作人员账号" required>
        @Html.ValidationMessageFor(m => m.Username, null, new { @class = "field-validation-error" })
    </div>

    <div class="form-group password-group">
        <label for="staffPassword">密码</label>
        <div class="password-input-container">
            <input type="password" class="form-control password-input" id="staffPassword" name="Password"
                   placeholder="请输入密码" required>
            <button type="button" class="toggle-password" id="toggleStaffPassword">
                <i class="fas fa-eye-slash" aria-hidden="true"></i>
            </button>
        </div>
        @Html.ValidationMessageFor(m => m.Password, null, new { @class = "field-validation-error" })
    </div>

    <div class="form-group">
        <label for="staffCaptcha">验证码</label>
        <div class="captcha-container">
            <input type="text" class="form-control captcha-input" id="staffCaptcha" name="Captcha"
                   placeholder="请输入验证码" maxlength="4" required>
            @Html.ValidationMessageFor(m => m.Captcha, null, new { @class = "field-validation-error" })

            <div class="captcha-image" id="staffCaptchaImage" title="点击刷新验证码">
            </div>
        </div>
        <input type="hidden" id="staffGeneratedCaptcha" name="GeneratedCaptcha" />
        <input type="hidden" id="staffRoleHidden" name="StaffRole" />
    </div>

    <div class="login-buttons">
        <button type="submit" class="btn btn-primary btn-login">登录</button>
        <button type="button" class="btn btn-danger btn-cancel" id="staffCancelBtn" onclick="goToHome()">取消</button>
    </div>
</form>

<script>
    // 刷新工作人员验证码
    window.refreshStaffCaptcha = function () {
        const captcha = generateCaptcha();
        const captchaElement = document.getElementById('staffCaptchaImage');
        const hiddenField = document.getElementById('staffGeneratedCaptcha');
        if (captchaElement && hiddenField) {
            captchaElement.textContent = captcha;
            hiddenField.value = captcha;
            const colors = ['#333', '#e74c3c', '#27ae60', '#3498db', '#8e44ad', '#f39c12'];
            captchaElement.style.color = colors[Math.floor(Math.random() * colors.length)];
            document.getElementById('staffCaptcha').value = '';
        }
    }

    // 页面初始化
    document.addEventListener('DOMContentLoaded', function () {
        // 初始化验证码
        refreshStaffCaptcha();

        // 初始化密码切换
        setupPasswordToggle('toggleStaffPassword', 'staffPassword');

        // 绑定验证码刷新事件
        document.getElementById('staffCaptchaImage').addEventListener('click', refreshStaffCaptcha);

        // 同步角色选择值
        const roleSelect = document.getElementById('staffRole');
        const roleHidden = document.getElementById('staffRoleHidden');
        if (roleSelect && roleHidden) {
            roleHidden.value = roleSelect.value;
            roleSelect.addEventListener('change', function () {
                roleHidden.value = this.value;
            });
        }

        // 工作人员登录表单验证
        document.getElementById('staffLoginForm').addEventListener('submit', function (e) {
            const userInput = document.getElementById('staffCaptcha').value;
            const generated = document.getElementById('staffGeneratedCaptcha').value;
            if (!userInput) {
                alert('请输入验证码');
                e.preventDefault();
                return false;
            }
            if (userInput.toUpperCase() !== generated.toUpperCase()) {
                alert('验证码不正确');
                refreshStaffCaptcha();
                e.preventDefault();
                return false;
            }
            return true;
        });
    });
</script>
