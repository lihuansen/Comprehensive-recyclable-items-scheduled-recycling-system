@model recycling.Model.StaffLoginViewModel

@{
    ViewBag.Title = "工作人员登录";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- 引入Font Awesome用于眼睛图标 -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="~/Content/login.css" rel="stylesheet" type="text/css" />

<div class="login-container">
    <h2 class="login-title">工作人员登录</h2>

    <!-- 显示后端验证错误 -->
    @Html.ValidationSummary(true, "登录失败，请检查以下问题：", new { @class = "validation-summary-errors" })

    @using (Html.BeginForm("Login", "Staff", FormMethod.Post, new { id = "staffLoginForm" }))
    {
        @Html.AntiForgeryToken()

        <!-- 角色选择区域 - 工作人员特有 -->
        <div class="form-group staff-role-selection">
            @Html.LabelFor(model => model.StaffRole, new { @class = "control-label" })
            <div class="staff-role-options">
                <label class="staff-role-option">
                    @Html.RadioButtonFor(model => model.StaffRole, "recycler", new { @checked = "checked" }) 回收员
                </label>
                <label class="staff-role-option">
                    @Html.RadioButtonFor(model => model.StaffRole, "admin") 管理员
                </label>
                <label class="staff-role-option">
                    @Html.RadioButtonFor(model => model.StaffRole, "superadmin") 超级管理员
                </label>
            </div>
            @Html.ValidationMessageFor(model => model.StaffRole, "", new { @class = "text-danger" })
        </div>

        <!-- 用户名输入框 -->
        <div class="form-group">
            @Html.LabelFor(model => model.Username, new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Username, new
            {
                @class = "form-control",
                placeholder = "请输入用户名",
                required = "required"
            })
            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
        </div>

        <!-- 密码输入框（带小眼睛） -->
        <div class="form-group password-group">
            @Html.LabelFor(model => model.Password, new { @class = "control-label" })
            <div class="password-input-container">
                @Html.PasswordFor(model => model.Password, new
                {
                    @class = "form-control password-input",
                    placeholder = "请输入密码",
                    required = "required",
                    id = "passwordInput"
                })
                <button type="button" class="toggle-password" id="togglePassword">
                    <i class="fas fa-eye-slash" aria-hidden="true"></i>
                </button>
            </div>
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>

        <!-- 验证码 -->
        <div class="form-group">
            @Html.LabelFor(model => model.Captcha, new { @class = "control-label" })
            <div class="captcha-container">
                @Html.TextBoxFor(model => model.Captcha, new
                {
                    @class = "form-control captcha-input",
                    placeholder = "请输入验证码",
                    maxlength = "4",
                    required = "required"
                })
                <div class="captcha-image" id="captchaImage" title="点击刷新验证码">
                    @Model.GeneratedCaptcha
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.Captcha, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.GeneratedCaptcha, new { id = "generatedCaptcha" })
        </div>

        <!-- 登录按钮 -->
        <div class="login-buttons">
            <button type="submit" class="btn btn-primary btn-login">登录</button>
            <a href="@Url.Action("LoginSelect", "Home")" class="btn btn-cancel">取消</a>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // 验证码字符集（与用户登录完全一致）
        const captchaChars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';

        // 生成随机验证码（与用户登录完全一致）
        function generateCaptcha() {
            let captcha = '';
            for (let i = 0; i < 4; i++) {
                const randomIndex = Math.floor(Math.random() * captchaChars.length);
                captcha += captchaChars[randomIndex];
            }
            return captcha;
        }

        // 刷新验证码（与用户登录完全一致）
        function refreshCaptcha() {
            const captcha = generateCaptcha();
            const captchaElement = document.getElementById('captchaImage');
            const hiddenField = document.getElementById('generatedCaptcha');

            if (captchaElement && hiddenField) {
                captchaElement.textContent = captcha;
                hiddenField.value = captcha;

                // 添加随机颜色效果增强安全性（与用户登录一致）
                const colors = ['#333', '#e74c3c', '#27ae60', '#3498db', '#8e44ad', '#f39c12'];
                captchaElement.style.color = colors[Math.floor(Math.random() * colors.length)];

                // 清空输入框
                document.getElementById('@Html.IdFor(m => m.Captcha)').value = '';
            }
        }

        // 密码显示/隐藏切换功能（与用户登录完全一致）
        function setupPasswordToggle(toggleBtnId, passwordInputId) {
            const toggleBtn = document.getElementById(toggleBtnId);
            const passwordInput = document.getElementById(passwordInputId);

            if (toggleBtn && passwordInput) {
                toggleBtn.addEventListener('click', function() {
                    // 切换密码可见性
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);

                    // 切换图标
                    const icon = this.querySelector('i');
                    if (type === 'password') {
                        icon.classList.remove('fa-eye');
                        icon.classList.add('fa-eye-slash');
                    } else {
                        icon.classList.remove('fa-eye-slash');
                        icon.classList.add('fa-eye');
                    }
                });
            }
        }

        // 页面加载时初始化（与用户登录完全一致）
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化密码显示/隐藏功能
            setupPasswordToggle('togglePassword', 'passwordInput');

            // 绑定验证码点击刷新事件
            document.getElementById('captchaImage').addEventListener('click', refreshCaptcha);

            // 处理验证错误后的验证码刷新
            @if (!ViewData.ModelState.IsValid)
            {
                bool hasCaptchaError = ViewData.ModelState.Values.Any(v => v.Errors.Any(e => e.ErrorMessage.Contains("验证码")));
                if (hasCaptchaError)
                {
                    @:refreshCaptcha();
                }
            }

            // 表单提交前验证（与用户登录完全一致）
            const staffForm = document.getElementById('staffLoginForm');
            if (staffForm) {
                staffForm.addEventListener('submit', function(e) {
                    const userInput = document.getElementById('@Html.IdFor(m => m.Captcha)').value;
                    const generatedCaptcha = document.getElementById('generatedCaptcha').value;

                    // 客户端先验证一次，提升用户体验
                    if (!userInput) {
                        alert('请输入验证码');
                        e.preventDefault();
                        return false;
                    }

                    if (userInput.toUpperCase() !== generatedCaptcha.toUpperCase()) {
                        alert('验证码不正确，请重新输入');
                        refreshCaptcha();
                        e.preventDefault();
                        return false;
                    }

                    return true;
                });
            }
        });
    </script>
}