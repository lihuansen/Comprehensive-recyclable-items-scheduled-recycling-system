@{
    ViewBag.Title = "订单管理";
    Layout = "~/Views/Shared/_RecyclerLayout.cshtml";
}

<style>
    .order-management-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    .statistics-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 25px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .stat-item {
        background: rgba(255,255,255,0.2);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        backdrop-filter: blur(10px);
    }

    .stat-number {
        font-size: 32px;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 14px;
        opacity: 0.9;
    }

    .filter-section {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        margin-bottom: 30px;
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        align-items: end;
    }

    .filter-group {
        margin-bottom: 0;
    }

    .filter-label {
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
        display: block;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 10px 15px;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

    .btn-search {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 10px 25px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        height: 46px;
    }

        .btn-search:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

    .orders-section {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f8f9fa;
    }

    .section-title {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        margin: 0;
    }

    .order-list {
        display: grid;
        gap: 20px;
        margin-bottom: 30px;
    }

    .order-item {
        border: 2px solid #f8f9fa;
        border-radius: 12px;
        padding: 25px;
        transition: all 0.3s ease;
        background: white;
    }

        .order-item:hover {
            border-color: #667eea;
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .order-item.urgent {
            border-left: 4px solid #e74c3c;
            background: linear-gradient(135deg, #fff5f5 0%, #fff 100%);
        }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .order-number {
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .order-status {
        padding: 6px 15px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .status-confirmed {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    .status-completed {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .order-details {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
    }

    .detail-label {
        font-size: 12px;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .detail-value {
        font-weight: 600;
        color: #333;
        font-size: 14px;
    }

    .order-categories {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 15px;
    }

    .category-tag {
        background: #e8f4fd;
        color: #3498db;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .order-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        border-top: 1px solid #f8f9fa;
        padding-top: 15px;
    }

    .btn-action {
        padding: 8px 16px;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        background: white;
        color: #6c757d;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        text-decoration: none;
    }

        .btn-action:hover {
            background: #f8f9fa;
            color: #495057;
            text-decoration: none;
        }

        .btn-action.primary {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

            .btn-action.primary:hover {
                background: #2980b9;
                color: white;
            }

        .btn-action.success {
            background: #27ae60;
            color: white;
            border-color: #27ae60;
        }

            .btn-action.success:hover {
                background: #219a52;
                color: white;
            }

        .btn-action.warning {
            background: #f39c12;
            color: white;
            border-color: #f39c12;
        }

            .btn-action.warning:hover {
                background: #e67e22;
                color: white;
            }

    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-top: 30px;
    }

    .pagination-info {
        color: #6c757d;
        font-size: 14px;
    }

    .pagination {
        display: flex;
        gap: 5px;
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .pagination li {
            margin: 0;
        }

            .pagination li a {
                display: flex;
                align-items: center;
                justify-content: center;
                width: 40px;
                height: 40px;
                border: 1px solid #e9ecef;
                border-radius: 6px;
                color: #333;
                text-decoration: none;
                transition: all 0.3s ease;
            }

                .pagination li a:hover {
                    background: #f8f9fa;
                    border-color: #667eea;
                }

            .pagination li.active a {
                background: #667eea;
                color: white;
                border-color: #667eea;
            }

            .pagination li.disabled a {
                color: #6c757d;
                cursor: not-allowed;
                opacity: 0.6;
            }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

        .empty-state i {
            font-size: 64px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h3 {
            font-size: 20px;
            margin-bottom: 10px;
            color: #495057;
        }

    .urgent-badge {
        background: #e74c3c;
        color: white;
        padding: 3px 8px;
        border-radius: 10px;
        font-size: 10px;
        font-weight: bold;
        margin-left: 8px;
    }

    .loading-spinner {
        text-align: center;
        padding: 40px;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .alert-message {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* 消息模态框样式 */
    .conversation-modal .modal-dialog {
        max-width: 800px;
    }

    .conversation-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px 10px 0 0;
    }

    .conversation-body {
        height: 500px;
        display: flex;
        flex-direction: column;
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background: #f8f9fa;
    }

    .message-bubble {
        max-width: 70%;
        margin-bottom: 15px;
        padding: 12px 16px;
        border-radius: 18px;
        position: relative;
    }

    .message-recycler {
        background: #3498db;
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 4px;
    }

    .message-user {
        background: white;
        color: #333;
        border: 1px solid #e9ecef;
        margin-right: auto;
        border-bottom-left-radius: 4px;
    }

    .message-system {
        background: #f39c12;
        color: white;
        margin: 10px auto;
        text-align: center;
        max-width: 90%;
        font-size: 12px;
    }

    .message-sender-name {
        font-size: 12px;
        font-weight: bold;
        margin-bottom: 4px;
        opacity: 0.8;
    }

    .message-content {
        margin: 0;
        line-height: 1.4;
    }

    .message-time {
        font-size: 11px;
        opacity: 0.7;
        margin-top: 4px;
        text-align: right;
    }

    .input-container {
        padding: 20px;
        border-top: 1px solid #e9ecef;
        background: white;
    }

    .input-group {
        display: flex;
        gap: 10px;
    }

    .message-input {
        flex: 1;
        border: 2px solid #e9ecef;
        border-radius: 25px;
        padding: 12px 20px;
        outline: none;
        transition: all 0.3s ease;
    }

        .message-input:focus {
            border-color: #3498db;
        }

    .send-btn {
        background: #3498db;
        color: white;
        border: none;
        border-radius: 25px;
        padding: 12px 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .send-btn:hover {
            background: #2980b9;
            transform: translateY(-1px);
        }

        .send-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
        }
</style>

<div class="order-management-container">
    <!-- 统计头部 -->
    <div class="statistics-header">
        <h2 style="margin: 0; font-size: 28px;">
            <i class="fas fa-chart-line"></i> 订单统计概览
        </h2>
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">@(ViewBag.OrderStatistics?.TotalOrders ?? 0)</div>
                <div class="stat-label">总订单数</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@(ViewBag.OrderStatistics?.PendingOrders ?? 0)</div>
                <div class="stat-label">待确认订单</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@(ViewBag.OrderStatistics?.ConfirmedOrders ?? 0)</div>
                <div class="stat-label">进行中订单</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@(ViewBag.OrderStatistics?.CompletedOrders ?? 0)</div>
                <div class="stat-label">已完成订单</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@(ViewBag.OrderStatistics?.CancelledOrders ?? 0)</div>
                <div class="stat-label">已取消订单</div>
            </div>
        </div>
    </div>

    <!-- 筛选区域 -->
    <div class="filter-section">
        <div class="filter-row">
            <div class="filter-group">
                <label class="filter-label">订单编号</label>
                <input type="text" id="orderNumberFilter" class="form-control" placeholder="输入订单编号...">
            </div>
            <div class="filter-group">
                <label class="filter-label">预约日期</label>
                <input type="date" id="appointmentDateFilter" class="form-control">
            </div>
            <div class="filter-group">
                <label class="filter-label">订单状态</label>
                <select id="statusFilter" class="form-control">
                    <option value="">全部状态</option>
                    <option value="待确认">待确认</option>
                    <option value="进行中">进行中</option>
                    <option value="已完成">已完成</option>
                    <option value="已取消">已取消</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">加急订单</label>
                <select id="urgentFilter" class="form-control">
                    <option value="">全部</option>
                    <option value="true">仅加急</option>
                    <option value="false">普通订单</option>
                </select>
            </div>
            <div class="filter-group">
                <button class="btn btn-search" onclick="loadOrders()">
                    <i class="fas fa-search"></i> 搜索订单
                </button>
            </div>
        </div>
    </div>

    <!-- 订单列表区域 -->
    <div class="orders-section">
        <div class="section-header">
            <h3 class="section-title">订单列表</h3>
        </div>

        <!-- 消息提示 -->
        <div id="alertContainer"></div>

        <!-- 订单列表 -->
        <div id="ordersContainer">
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>正在加载订单数据...</p>
            </div>
        </div>

        <!-- 分页 -->
        <div id="paginationContainer" class="pagination-container" style="display: none;">
            <div class="pagination-info" id="pageInfo"></div>
            <ul class="pagination" id="pagination"></ul>
        </div>
    </div>
</div>

<!-- 对话模态框 -->
<div class="modal fade conversation-modal" id="conversationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="conversation-header">
                <h5 class="modal-title">
                    <i class="fas fa-comments"></i> 订单对话 - <span id="conversationOrderNumber"></span>
                </h5>
                <button type="button" class="close" data-dismiss="modal" style="color: white;">
                    <span>&times;</span>
                </button>
            </div>
            <div class="conversation-body">
                <div class="messages-container" id="conversationMessages">
                    <!-- 消息内容动态加载 -->
                </div>
                <div class="input-container">
                    <div class="input-group">
                        <input type="text" class="message-input" id="conversationInput" placeholder="输入回复消息...">
                        <button class="send-btn" id="sendMessageBtn" onclick="sendConversationMessage()">
                            <i class="fas fa-paper-plane"></i> 发送
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;
        let currentOrderId = 0;

        document.addEventListener('DOMContentLoaded', function () {
            loadOrders();
        });

        // 显示消息提示
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertClass = type === 'success' ? 'alert-success' : 'alert-error';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';

            const alertHTML = `
                <div class="alert-message ${alertClass}">
                    <i class="fas ${icon}"></i>
                    <span>${message}</span>
                </div>
            `;

            alertContainer.innerHTML = alertHTML;

            setTimeout(() => {
                alertContainer.innerHTML = '';
            }, 5000);
        }

        // 加载订单数据
        function loadOrders(page = 1) {
            currentPage = page;

            const filter = {
                OrderNumber: document.getElementById('orderNumberFilter').value,
                AppointmentDate: document.getElementById('appointmentDateFilter').value,
                Status: document.getElementById('statusFilter').value,
                IsUrgent: document.getElementById('urgentFilter').value,
                PageIndex: page,
                PageSize: pageSize
            };

            const ordersContainer = document.getElementById('ordersContainer');
            ordersContainer.innerHTML = `
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载订单数据...</p>
                </div>
            `;

            fetch('@Url.Action("GetRecyclerOrders", "Staff")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(filter)
            })
            .then(response => response.json())
            .then(data => {
                console.log('API响应数据:', data); // 调试信息
                if (data.success) {
                    renderOrders(data.data);
                    renderPagination(data.data);
                } else {
                    showError(data.message || '加载订单失败');
                }
            })
            .catch(error => {
                console.error('加载订单失败:', error);
                showError('网络错误，请稍后重试');
            });
        }

        // 渲染订单列表
        function renderOrders(data) {
            const ordersContainer = document.getElementById('ordersContainer');

            console.log('渲染订单数据:', data); // 调试信息

            if (!data || !data.Items || data.Items.length === 0) {
                ordersContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-clipboard-list"></i>
                        <h3>暂无订单数据</h3>
                        <p>当前筛选条件下没有找到符合条件的订单</p>
                    </div>
                `;
                return;
            }

            let ordersHTML = '<div class="order-list">';

            data.Items.forEach(order => {
                console.log('单个订单数据:', order); // 调试信息

                const urgentClass = order.IsUrgent ? 'urgent' : '';
                const urgentBadge = order.IsUrgent ? '<span class="urgent-badge">加急</span>' : '';

                let actionButtons = '';

                if (order.Status === '待确认') {
                    actionButtons = `
                        <div class="order-actions">
                            <button class="btn-action success" onclick="acceptOrder(${order.AppointmentID})">
                                <i class="fas fa-check"></i>接收订单
                            </button>
                            <button class="btn-action primary" onclick="viewOrderDetail(${order.AppointmentID})">
                                <i class="fas fa-eye"></i>查看详情
                            </button>
                        </div>
                    `;
                } else if (order.Status === '进行中') {
                    actionButtons = `
                        <div class="order-actions">
                            <button class="btn-action warning" onclick="openConversationModal(${order.AppointmentID}, '${order.OrderNumber}')">
                                <i class="fas fa-comments"></i>联系用户
                            </button>
                            <button class="btn-action primary" onclick="viewOrderDetail(${order.AppointmentID})">
                                <i class="fas fa-eye"></i>查看详情
                            </button>
                        </div>
                    `;
                } else {
                    actionButtons = `
                        <div class="order-actions">
                            <button class="btn-action primary" onclick="viewOrderDetail(${order.AppointmentID})">
                                <i class="fas fa-eye"></i>查看详情
                            </button>
                        </div>
                    `;
                }

                // 格式化日期
                const appointmentDate = new Date(order.AppointmentDate).toLocaleDateString('zh-CN');
                const estimatedPrice = order.EstimatedPrice ? `¥${order.EstimatedPrice}` : '待评估';
                const categoryNames = order.CategoryNames || '';

                ordersHTML += `
                    <div class="order-item ${urgentClass}" data-order-id="${order.AppointmentID}">
                        <div class="order-header">
                            <div class="order-number">
                                ${order.OrderNumber} ${urgentBadge}
                            </div>
                            <div class="order-status status-${order.Status.toLowerCase().replace(' ', '-')}">
                                ${order.Status}
                            </div>
                        </div>

                        <div class="order-details">
                            <div class="detail-item">
                                <span class="detail-label">预约类型</span>
                                <span class="detail-value">${order.AppointmentType}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">预约时间</span>
                                <span class="detail-value">${appointmentDate} ${order.TimeSlot}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">预估重量</span>
                                <span class="detail-value">${order.EstimatedWeight} 公斤</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">预估价格</span>
                                <span class="detail-value">${estimatedPrice}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">联系人</span>
                                <span class="detail-value">${order.ContactName}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">联系电话</span>
                                <span class="detail-value">${order.ContactPhone}</span>
                            </div>
                        </div>

                        ${categoryNames ? `
                        <div class="order-categories">
                            ${categoryNames.split(', ').map(cat => `<span class="category-tag">${cat}</span>`).join('')}
                        </div>
                        ` : ''}

                        ${actionButtons}
                    </div>
                `;
            });

            ordersHTML += '</div>';
            ordersContainer.innerHTML = ordersHTML;
        }

        // 渲染分页
        function renderPagination(data) {
            const paginationContainer = document.getElementById('paginationContainer');
            const pageInfo = document.getElementById('pageInfo');
            const pagination = document.getElementById('pagination');

            console.log('分页数据:', data); // 调试信息

            if (!data || data.TotalPages <= 1) {
                paginationContainer.style.display = 'none';
                return;
            }

            paginationContainer.style.display = 'flex';
            pageInfo.textContent = `共 ${data.TotalCount || 0} 条记录，第 ${currentPage}/${data.TotalPages || 1} 页`;

            let paginationHTML = '';

            // 上一页
            if (currentPage > 1) {
                paginationHTML += `
                    <li>
                        <a href="javascript:void(0)" onclick="loadOrders(${currentPage - 1})">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;
            } else {
                paginationHTML += '<li class="disabled"><a href="javascript:void(0)"><i class="fas fa-chevron-left"></i></a></li>';
            }

            // 页码
            const totalPages = data.TotalPages || 1;
            for (let i = 1; i <= totalPages; i++) {
                if (i === currentPage) {
                    paginationHTML += `<li class="active"><a href="javascript:void(0)">${i}</a></li>`;
                } else {
                    paginationHTML += `<li><a href="javascript:void(0)" onclick="loadOrders(${i})">${i}</a></li>`;
                }
            }

            // 下一页
            if (currentPage < totalPages) {
                paginationHTML += `
                    <li>
                        <a href="javascript:void(0)" onclick="loadOrders(${currentPage + 1})">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;
            } else {
                paginationHTML += '<li class="disabled"><a href="javascript:void(0)"><i class="fas fa-chevron-right"></i></a></li>';
            }

            pagination.innerHTML = paginationHTML;
        }

        // 显示错误
        function showError(message) {
            const ordersContainer = document.getElementById('ordersContainer');
            ordersContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>加载失败</h3>
                    <p>${message}</p>
                    <button class="btn-action primary" onclick="loadOrders(1)">
                        <i class="fas fa-redo"></i>重新加载
                    </button>
                </div>
            `;
        }

        // 接收订单
        function acceptOrder(appointmentId) {
            if (!confirm('确定要接收这个订单吗？接收后您将负责此订单的回收工作。')) {
                return;
            }

            fetch('@Url.Action("AcceptOrder", "Staff")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ appointmentId: appointmentId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message, 'success');
                    loadOrders(currentPage); // 重新加载当前页
                } else {
                    showAlert(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('接收订单失败:', error);
                showAlert('网络错误，请稍后重试', 'error');
            });
        }

        // 查看订单详情
        function viewOrderDetail(appointmentId) {
            // 这里可以跳转到订单详情页面或打开模态框
            alert('查看订单详情功能：' + appointmentId);
        }

        // 打开对话模态框
        function openConversationModal(orderId, orderNumber) {
            currentOrderId = orderId;
            document.getElementById('conversationOrderNumber').textContent = orderNumber;
            loadConversationMessages(orderId);
            $('#conversationModal').modal('show');
        }

        // 加载对话消息
        function loadConversationMessages(orderId) {
            const container = document.getElementById('conversationMessages');
            container.innerHTML = '<div class="loading-spinner"><div class="spinner"></div><p>加载对话中...</p></div>';

            fetch('@Url.Action("GetOrderConversation", "Staff")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ orderId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderConversationMessages(data.data);
                } else {
                    container.innerHTML = `<div class="empty-state"><p>${data.message}</p></div>`;
                }
            })
            .catch(error => {
                container.innerHTML = `<div class="empty-state"><p>加载失败：${error.message}</p></div>`;
            });
        }

        // 渲染对话消息
        function renderConversationMessages(messages) {
            const container = document.getElementById('conversationMessages');

            if (!messages || messages.length === 0) {
                container.innerHTML = '<div class="empty-state"><p>暂无消息记录</p></div>';
                return;
            }

            let messagesHTML = '';
            messages.forEach(message => {
                let bubbleClass = '';
                if (message.SenderType === 'recycler') {
                    bubbleClass = 'message-bubble message-recycler';
                } else if (message.SenderType === 'user') {
                    bubbleClass = 'message-bubble message-user';
                } else {
                    bubbleClass = 'message-bubble message-system';
                }

                const displayTime = new Date(message.SentTime).toLocaleTimeString('zh-CN', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                messagesHTML += `
                    <div class="${bubbleClass}">
                        <div class="message-sender-name">${message.SenderName}</div>
                        <div class="message-content">${message.Content}</div>
                        <div class="message-time">${displayTime}</div>
                    </div>
                `;
            });

            container.innerHTML = messagesHTML;
            container.scrollTop = container.scrollHeight;
        }

        // 发送对话消息
        function sendConversationMessage() {
            const input = document.getElementById('conversationInput');
            const content = input.value.trim();

            if (!content) {
                alert('请输入消息内容');
                return;
            }

            const sendBtn = document.getElementById('sendMessageBtn');
            const originalText = sendBtn.innerHTML;
            sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 发送中...';
            sendBtn.disabled = true;

            const request = {
                OrderID: currentOrderId,
                Content: content
            };

            fetch('@Url.Action("SendMessageToUser", "Staff")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(request)
            })
            .then(response => response.json())
            .then(data => {
                sendBtn.innerHTML = originalText;
                sendBtn.disabled = false;

                if (data.success) {
                    input.value = '';
                    loadConversationMessages(currentOrderId); // 重新加载对话
                } else {
                    alert('发送失败：' + data.message);
                }
            })
            .catch(error => {
                sendBtn.innerHTML = originalText;
                sendBtn.disabled = false;
                alert('发送失败：' + error.message);
            });
        }

        // 回车发送消息
        document.getElementById('conversationInput')?.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendConversationMessage();
            }
        });
    </script>
}