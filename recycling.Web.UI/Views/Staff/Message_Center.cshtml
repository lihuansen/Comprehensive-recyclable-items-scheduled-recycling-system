@model List<recycling.Model.RecyclerMessageViewModel>

@{
    ViewBag.Title = "消息中心";
    Layout = "~/Views/Shared/_RecyclerLayout.cshtml";
}

<h3>消息中心 - 与已接收订单用户对话</h3>

<div class="row">
    <div class="col-md-4">
        <!-- 列表：每个订单只显示最新一条消息摘要 -->
        <!-- 在页面合适位置添加一个按钮或面板（示例：顶部） -->
        <button id="openHistoryBtn" class="btn btn-default" style="margin-bottom:10px;">查看历史会话</button>
        <div id="orderList" class="list-group">
            @{
                var latestPerOrder = new Dictionary<int, recycling.Model.RecyclerMessageViewModel>();
                if (Model != null)
                {
                    foreach (var item in Model)
                    {
                        if (!latestPerOrder.ContainsKey(item.OrderID))
                        {
                            latestPerOrder[item.OrderID] = item;
                        }
                        else
                        {
                            if (item.SentTime > latestPerOrder[item.OrderID].SentTime)
                            {
                                latestPerOrder[item.OrderID] = item;
                            }
                        }
                    }
                }

                foreach (var kv in latestPerOrder.OrderByDescending(k => k.Value.SentTime))
                {
                    var m = kv.Value;
                    var displayOrderNumber = !string.IsNullOrWhiteSpace(m.OrderNumber) ? m.OrderNumber : ("AP" + m.OrderID.ToString("D6"));
                    <a href="javascript:void(0);" class="list-group-item list-group-item-action order-item" data-order-id="@m.OrderID" data-user-name="@Html.Raw(HttpUtility.HtmlEncode(m.SenderName ?? ""))" id="order-item-@m.OrderID">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">订单：@Html.Raw(HttpUtility.HtmlEncode(displayOrderNumber))</h5>
                            <small>@m.SentTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</small>
                        </div>
                        <p class="mb-1 text-truncate">@Html.Raw(HttpUtility.HtmlEncode(m.Content))</p>
                        <small class="text-muted">用户：@Html.Raw(HttpUtility.HtmlEncode(m.SenderName ?? "未知"))</small>
                    </a>
                }
            }
        </div>
    </div>

    <div class="col-md-8">
        <!-- 聊天区域 -->
        <div class="card">
            <div class="card-header">
                <h5 id="chatHeader">请选择左侧订单以展开会话</h5>
            </div>
            <div class="card-body" style="height:520px;">
                <div id="conversationContainer" style="height:380px; overflow-y:auto; border:1px solid #eee; padding:10px; background:#fff;"></div>

                <div class="mt-3">
                    <div class="input-group">
                        <input type="text" id="conversationInput" class="form-control" placeholder="输入联系用户的消息...">
                        <span class="input-group-btn">
                            <button id="sendMessageBtn" class="btn btn-primary">联系用户</button>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
    var currentOrderId = null;
    var currentUserName = null;
    var refreshInterval = null;

    function escapeHtml(str) {
        if (str === null || str === undefined) return '';
        return String(str)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
    }

    function formatTime(isoString) {
        if (!isoString) return '';
        try {
            var d = new Date(isoString);
            return d.toLocaleString();
        } catch (e) {
            return isoString;
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        var orderList = document.getElementById('orderList');
        if (orderList) {
            orderList.addEventListener('click', function (e) {
                var target = e.target;
                while (target && !target.classList.contains('order-item')) {
                    target = target.parentElement;
                }
                if (!target) return;

                var orderId = target.getAttribute('data-order-id');
                var userName = target.getAttribute('data-user-name') || '用户';
                if (!orderId) return;

                openConversation(parseInt(orderId, 10), userName);
            });
        }

        var sendBtn = document.getElementById('sendMessageBtn');
        if (sendBtn) {
            sendBtn.addEventListener('click', sendConversationMessage);
        }

        var convInput = document.getElementById('conversationInput');
        if (convInput) {
            convInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') sendConversationMessage();
            });
        }
    });

    function openConversation(orderId, userName) {
        currentOrderId = orderId;
        currentUserName = userName || '用户';
        document.getElementById('chatHeader').innerText = '订单：' + (orderId || '') + ' - ' + currentUserName;

        var prev = document.querySelector('.order-item.active');
        if (prev) prev.classList.remove('active');
        var cur = document.getElementById('order-item-' + orderId);
        if (cur) cur.classList.add('active');

        var input = document.getElementById('conversationInput');
        if (input) input.value = '';

        loadConversationMessages(currentOrderId);
        if (refreshInterval) clearInterval(refreshInterval);
        refreshInterval = setInterval(function () {
            if (currentOrderId) loadConversationMessages(currentOrderId);
        }, 3000);

        // 打开对话时标记为已读
        markMessagesAsRead(currentOrderId);
    }

    window.addEventListener('beforeunload', function () {
        if (refreshInterval) clearInterval(refreshInterval);
    });

    function loadConversationMessages(orderId) {
        if (!orderId) return;

        fetch('@Url.Action("GetOrderConversation", "Staff")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ orderId: orderId })
        })
        .then(function (res) { return res.json(); })
        .then(function (data) {
            if (data.success) {
                var messages = data.messages || data.data || [];
                renderConversationMessages(messages);
            } else {
                var container = document.getElementById('conversationContainer');
                if (container) container.innerHTML = '<div class="text-danger">加载对话失败：' + escapeHtml(data.message || '') + '</div>';
            }
        })
        .catch(function (err) {
            console.error('加载对话出错：', err);
            var container = document.getElementById('conversationContainer');
            if (container) container.innerHTML = '<div class="text-danger">加载对话出错，请重试</div>';
        });
    }

    function renderConversationMessages(messages) {
        var container = document.getElementById('conversationContainer');
        if (!container) return;
        container.innerHTML = '';

        if (!messages || messages.length === 0) {
            container.innerHTML = '<div class="text-center text-muted"><i class="fas fa-comment-slash"></i> 暂无消息</div>';
            return;
        }

        try {
            messages.sort(function(a, b) {
                var ta = new Date(a.sentTime || a.SentTime).getTime();
                var tb = new Date(b.sentTime || b.SentTime).getTime();
                return ta - tb;
            });
        } catch (e) { }

        messages.forEach(function (msg) {
            var senderType = (msg.senderType || msg.SenderType || '').toString().toLowerCase();
            var content = msg.content || msg.Content || '';
            var sentTime = msg.sentTime || msg.SentTime || '';
            var senderName = msg.senderName || msg.SenderName || '';

            var isRecycler = (senderType === 'recycler');
            var alignClass = isRecycler ? 'text-right' : 'text-left';
            var bgClass = isRecycler ? 'bg-secondary text-white' : 'bg-light';

            var timeText = formatTime(sentTime);
            var label = isRecycler ? '我' : (senderName || '用户');

            var html = ''
                + '<div class="' + alignClass + ' mb-3">'
                + '<small class="d-block text-muted">' + escapeHtml(label) + ' ' + escapeHtml(timeText) + '</small>'
                + '<span class="px-3 py-2 rounded ' + bgClass + '">' + escapeHtml(content) + '</span>'
                + '</div>';

            container.innerHTML += html;
        });

        container.scrollTop = container.scrollHeight;
    }

    function sendConversationMessage() {
        if (!currentOrderId) {
            alert('请先选择订单');
            return;
        }

        var input = document.getElementById('conversationInput');
        if (!input) return;
        var content = input.value.trim();
        if (!content) return;

        var sendBtn = document.getElementById('sendMessageBtn');
        if (sendBtn) {
            sendBtn.disabled = true;
            var originalText = sendBtn.innerHTML;
            sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 联系中...';
        }

        var req = {
            OrderID: currentOrderId,
            Content: content
        };

        fetch('@Url.Action("SendMessageToUser", "Staff")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(req)
        })
        .then(function (res) { return res.json(); })
        .then(function (data) {
            if (sendBtn) {
                sendBtn.disabled = false;
                sendBtn.innerHTML = originalText || '联系用户';
            }

            if (data.success) {
                input.value = '';
                loadConversationMessages(currentOrderId);

                var leftItem = document.getElementById('order-item-' + currentOrderId);
                if (leftItem) {
                    var p = leftItem.querySelector('p.mb-1');
                    if (p) p.textContent = content;
                    var small = leftItem.querySelector('small');
                    if (small) small.textContent = new Date().toLocaleString();
                }
            } else {
                alert('发送失败：' + data.message);
            }
        })
        .catch(function (err) {
            if (sendBtn) {
                sendBtn.disabled = false;
                sendBtn.innerHTML = originalText || '联系用户';
            }
            console.error('发送失败：', err);
            alert('发送失败：' + (err.message || err));
        });
    }

    function markMessagesAsRead(orderId) {
        if (!orderId) return;
        fetch('@Url.Action("MarkMessagesAsRead", "Staff")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ orderId: orderId })
        })
        .then(function (res) { return res.json(); })
        .then(function (data) {
            // 可选：更新左侧 badge/样式
        })
        .catch(function (err) {
            console.warn('标为已读失败', err);
        });
        }

        // 打开回收员历史会话列表（使用模态或页面内面板，下面示例为简单的 modal）
    document.getElementById('openHistoryBtn').addEventListener('click', function() {
        fetch('@Url.Action("GetRecyclerConversations","Staff")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'X-Requested-With':'XMLHttpRequest' },
            body: JSON.stringify({})
        })
        .then(r => r.json())
        .then(data => {
            if (data.success && data.conversations && data.conversations.length) {
                // 这里简单弹窗列出会话，点击后调用 GetConversationMessagesBeforeEnd 显示（实现细节可按你的 UI 调整）
                var list = data.conversations.map(function(c) {
                    return '订单：' + c.orderNumber + ' - 结束于：' + (new Date(c.endedTime)).toLocaleString();
                }).join('\\n');
                alert('历史会话:\\n' + list);
                // 更好的实现：使用 modal 显示并允许点击查看消息（与用户端 Message 界面相同）
            } else {
                alert('暂无历史会话');
            }
        })
        .catch(err => { console.error('加载回收员历史会话错误', err); alert('加载失败'); });
    });
    </script>
}