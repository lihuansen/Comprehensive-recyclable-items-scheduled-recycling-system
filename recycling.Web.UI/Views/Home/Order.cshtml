@{
    ViewBag.Title = "我的订单";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- 引入Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    .order-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 30px 20px;
    }

    .order-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .order-title {
        font-size: 32px;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 10px;
    }

    .order-subtitle {
        font-size: 16px;
        color: #7f8c8d;
    }

    .order-card {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    /* 状态筛选标签样式 */
    .status-tabs {
        display: flex;
        background: #f8f9fa;
        border-radius: 12px;
        padding: 5px;
        margin-bottom: 30px;
        border: 2px solid #e9ecef;
    }

    .status-tab {
        flex: 1;
        padding: 15px 20px;
        text-align: center;
        background: transparent;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

        .status-tab:hover {
            color: #495057;
            background: rgba(255,255,255,0.7);
        }

        .status-tab.active {
            background: white;
            color: #2c3e50;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

            .status-tab.active.status-pending {
                color: #e67e22;
                border-bottom: 3px solid #e67e22;
            }

            .status-tab.active.status-confirmed {
                color: #3498db;
                border-bottom: 3px solid #3498db;
            }

            .status-tab.active.status-completed {
                color: #27ae60;
                border-bottom: 3px solid #27ae60;
            }

            .status-tab.active.status-cancelled {
                color: #e74c3c;
                border-bottom: 3px solid #e74c3c;
            }

    /* 订单内容区域 */
    .order-content {
        min-height: 400px;
    }

    .order-section {
        display: none;
        animation: fadeIn 0.5s ease;
    }

        .order-section.active {
            display: block;
        }

    /* 空状态样式 */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

        .empty-state i {
            font-size: 64px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h3 {
            font-size: 20px;
            margin-bottom: 10px;
            color: #495057;
        }

        .empty-state p {
            font-size: 14px;
            margin-bottom: 20px;
        }

    .btn-new-appointment {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 12px 24px;
        background: linear-gradient(45deg, #27ae60, #2ecc71);
        color: white;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-new-appointment:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
            color: white;
            text-decoration: none;
        }

    /* 订单卡片样式 */
    .order-list {
        display: grid;
        gap: 20px;
    }

    .order-item {
        background: white;
        border: 2px solid #f8f9fa;
        border-radius: 12px;
        padding: 25px;
        transition: all 0.3s ease;
    }

        .order-item:hover {
            border-color: #3498db;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

    .order-header-info {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .order-number {
        font-size: 18px;
        font-weight: bold;
        color: #2c3e50;
    }

    .order-status {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }

    .status-pending-badge {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .status-confirmed-badge {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    .status-completed-badge {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-cancelled-badge {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .order-details {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
    }

    .detail-label {
        font-size: 12px;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .detail-value {
        font-weight: 600;
        color: #2c3e50;
    }

    .order-categories {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 15px;
    }

    .category-tag {
        background: #e8f4fd;
        color: #3498db;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .order-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        border-top: 1px solid #f8f9fa;
        padding-top: 15px;
    }

    .btn-action {
        padding: 8px 16px;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        background: white;
        color: #6c757d;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

        .btn-action:hover {
            background: #f8f9fa;
            color: #495057;
        }

        .btn-action.primary {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

            .btn-action.primary:hover {
                background: #2980b9;
            }

        .btn-action.danger {
            background: #e74c3c;
            color: white;
            border-color: #e74c3c;
        }

            .btn-action.danger:hover {
                background: #c0392b;
            }

        .btn-action.success {
            background: #27ae60;
            color: white;
            border-color: #27ae60;
        }

            .btn-action.success:hover {
                background: #219a52;
            }

    /* 加载动画 */
    .loading-spinner {
        text-align: center;
        padding: 40px;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    /* 消息提示 */
    .alert-message {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* 动画效果 */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* 响应式设计 */
    @@media (max-width: 768px) {
        .order-container {
            padding: 20px 15px;
        }

        .order-card {
            padding: 20px;
        }

        .status-tabs {
            flex-direction: column;
            gap: 5px;
        }

        .status-tab {
            padding: 12px 15px;
        }

        .order-header-info {
            flex-direction: column;
            gap: 10px;
        }

        .order-details {
            grid-template-columns: 1fr;
        }

        .order-actions {
            flex-direction: column;
        }

        .btn-action {
            justify-content: center;
        }
    }
</style>

<div class="order-container">
    <div class="order-header">
        <h1 class="order-title">
            <i class="fas fa-list-alt"></i>我的订单
        </h1>
        <p class="order-subtitle">管理您的所有回收预约订单</p>
    </div>

    <div class="order-card">
        <!-- 消息提示区域 -->
        <div id="alertContainer"></div>

        <!-- 状态筛选标签 -->
        <div class="status-tabs">
            <button class="status-tab active" data-status="all">
                <i class="fas fa-list"></i>全部订单
            </button>
            <button class="status-tab status-pending" data-status="pending">
                <i class="fas fa-clock"></i>已预约
            </button>
            <button class="status-tab status-confirmed" data-status="confirmed">
                <i class="fas fa-check-circle"></i>进行中
            </button>
            <button class="status-tab status-completed" data-status="completed">
                <i class="fas fa-flag-checkered"></i>已完成
            </button>
            <button class="status-tab status-cancelled" data-status="cancelled">
                <i class="fas fa-times-circle"></i>已取消
            </button>
        </div>

        <!-- 订单内容区域 -->
        <div class="order-content">
            <!-- 全部订单 -->
            <div class="order-section active" id="all-orders">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载订单数据...</p>
                </div>
            </div>

            <!-- 已预约订单 -->
            <div class="order-section" id="pending-orders">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载已预约订单...</p>
                </div>
            </div>

            <!-- 进行中订单 -->
            <div class="order-section" id="confirmed-orders">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载进行中订单...</p>
                </div>
            </div>

            <!-- 已完成订单 -->
            <div class="order-section" id="completed-orders">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载已完成订单...</p>
                </div>
            </div>

            <!-- 已取消订单 -->
            <div class="order-section" id="cancelled-orders">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载已取消订单...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 订单详情模态框 -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-file-alt"></i>
                    <span id="modalOrderNumber">订单详情</span>
                </h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="modalLoading" class="loading-spinner">
                    <div class="spinner"></div>
                    <p>正在加载订单详情...</p>
                </div>
                <div id="modalContent" style="display: none;">
                    <!-- 基本信息 -->
                    <div class="detail-section">
                        <h6 class="section-title">
                            <i class="fas fa-info-circle"></i>基本信息
                        </h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="detail-item">
                                    <span class="detail-label">订单编号：</span>
                                    <span class="detail-value" id="detailNumber"></span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">预约类型：</span>
                                    <span class="detail-value" id="detailType"></span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">预约时间：</span>
                                    <span class="detail-value" id="detailDateTime"></span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">预估重量：</span>
                                    <span class="detail-value" id="detailWeight"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-item">
                                    <span class="detail-label">预估价格：</span>
                                    <span class="detail-value" id="detailPrice"></span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">订单状态：</span>
                                    <span class="detail-value" id="detailStatus"></span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">是否加急：</span>
                                    <span class="detail-value" id="detailUrgent"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 联系信息 -->
                    <div class="detail-section">
                        <h6 class="section-title">
                            <i class="fas fa-user"></i>联系信息
                        </h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="detail-item">
                                    <span class="detail-label">联系人：</span>
                                    <span class="detail-value" id="detailContactName"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-item">
                                    <span class="detail-label">联系电话：</span>
                                    <span class="detail-value" id="detailContactPhone"></span>
                                </div>
                            </div>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">详细地址：</span>
                            <span class="detail-value" id="detailAddress"></span>
                        </div>
                    </div>

                    <!-- 时间信息 -->
                    <div class="detail-section">
                        <h6 class="section-title">
                            <i class="fas fa-clock"></i>时间信息
                        </h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="detail-item">
                                    <span class="detail-label">创建时间：</span>
                                    <span class="detail-value" id="detailCreatedDate"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-item">
                                    <span class="detail-label">更新时间：</span>
                                    <span class="detail-value" id="detailUpdatedDate"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 特殊要求 -->
                    <div class="detail-section" id="specialInstructionsSection">
                        <h6 class="section-title">
                            <i class="fas fa-edit"></i>特殊要求
                        </h6>
                        <p id="detailSpecialInstructions" class="detail-text"></p>
                    </div>

                    <!-- 回收品类 -->
                    <div class="detail-section">
                        <h6 class="section-title">
                            <i class="fas fa-boxes"></i>回收品类
                        </h6>
                        <div id="detailCategories" class="categories-list"></div>
                    </div>

                    <!-- 新增回收员ID字段（默认隐藏） -->
                    <div class="detail-item" id="detailRecyclerId" style="display: none;">
                        <span class="detail-label">回收员ID：</span>
                        <span class="detail-value" id="recyclerID"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>
            </div>
        </div>
    </div>
</div>

<!-- 聊天模态框 -->
<div id="chatModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h5 class="modal-title">
                    <i class="fas fa-comments"></i>与回收员对话
                </h5>
            </div>
            <div class="modal-body">
                <!-- 消息列表区域 -->
                <div id="messageContainer" class="pre-scrollable" style="height:300px; margin-bottom:15px; border:1px solid #eee; padding:10px;"></div>

                <!-- 输入区域 -->
                <div class="input-group">
                    <input type="text" id="messageContent" class="form-control" placeholder="输入消息...">
                    <span class="input-group-btn">
                        <button id="sendBtn" class="btn btn-primary">发送</button>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 聊天功能相关变量
        let currentOrderId = null;
        let currentRecyclerId = null;
        let messageInterval = null;

        // 页面加载完成后绑定聊天按钮事件
        document.addEventListener('DOMContentLoaded', function() {
            // 现有初始化逻辑...

            // 委托绑定聊天按钮点击事件（因为订单是动态加载的）
            document.addEventListener('click', function(e) {
                if (e.target.closest('.contact-recycler')) {
                    const btn = e.target.closest('.contact-recycler');
                    currentOrderId = btn.getAttribute('data-orderid');
                    currentRecyclerId = btn.getAttribute('data-recyclerid');

                    // 显示聊天窗口并加载消息
                    $('#chatModal').modal('show');
                    loadMessages(currentOrderId);

                    // 开始定时刷新消息
                    if (messageInterval) clearInterval(messageInterval);
                    messageInterval = setInterval(() => {
                        if ($('#chatModal').is(':visible')) {
                            loadMessages(currentOrderId);
                        }
                    }, 3000);
                }
            });

            // 聊天窗口关闭时清除定时器
            $('#chatModal').on('hidden.bs.modal', function() {
                if (messageInterval) {
                    clearInterval(messageInterval);
                    messageInterval = null;
                }
            });

            // 发送消息按钮点击事件
            document.getElementById('sendBtn').addEventListener('click', sendMessage);

            // 回车发送消息
            document.getElementById('messageContent').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') sendMessage();
            });
        });

        // 加载消息
        function loadMessages(orderId) {
            if (!orderId) return;

            fetch('@Url.Action("GetOrderMessages", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ orderId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderMessages(data.messages);
                } else {
                    showAlert('加载消息失败: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('加载消息出错:', error);
            });
        }

        // 渲染消息列表
        function renderMessages(messages) {
            const container = document.getElementById('messageContainer');
            container.innerHTML = '';

            if (!messages || messages.length === 0) {
                container.innerHTML = '<div class="text-center text-muted"><i class="fas fa-comment-slash"></i> 还没有消息记录</div>';
                return;
            }

            messages.forEach(msg => {
                const isUser = msg.senderType === 'user';
                const alignClass = isUser ? 'text-right' : 'text-left';
                const bgClass = isUser ? 'bg-primary text-white' : 'bg-light';

                const messageHtml = `
                    <div class="${alignClass} mb-3">
                        <small class="d-block text-muted">${isUser ? '我' : '回收员'} ${formatTime(msg.sentTime)}</small>
                        <span class="px-3 py-2 rounded ${bgClass}">${escapeHtml(msg.content)}</span>
                    </div>
                `;
                container.innerHTML += messageHtml;
            });

            // 滚动到底部
            container.scrollTop = container.scrollHeight;
        }

        // 发送消息
        function sendMessage() {
            const content = document.getElementById('messageContent').value.trim();
            if (!content || !currentOrderId || !currentRecyclerId) return;

            fetch('@Url.Action("SendMessage", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    orderId: currentOrderId,
                    recyclerId: currentRecyclerId,
                    content: content
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('messageContent').value = '';
                    loadMessages(currentOrderId);
                } else {
                    showAlert('发送失败: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('发送消息出错:', error);
                showAlert('发送失败，请重试', 'error');
            });
        }

        // 辅助函数：格式化时间
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('zh-CN', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // 辅助函数：防止XSS攻击
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
        document.addEventListener('DOMContentLoaded', function () {
            // 状态标签切换功能
            const statusTabs = document.querySelectorAll('.status-tab');
            const orderSections = document.querySelectorAll('.order-section');

            statusTabs.forEach(tab => {
                tab.addEventListener('click', function () {
                    const status = this.getAttribute('data-status');
                    switchToTab(status);
                });
            });

            // 显示消息提示
            function showAlert(message, type) {
                const alertContainer = document.getElementById('alertContainer');
                const alertClass = type === 'success' ? 'alert-success' : 'alert-error';
                const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';

                const alertHTML = `
                    <div class="alert-message ${alertClass}">
                        <i class="fas ${icon}"></i>
                        <span>${message}</span>
                    </div>
                `;

                alertContainer.innerHTML = alertHTML;

                // 5秒后自动隐藏
                setTimeout(() => {
                    alertContainer.innerHTML = '';
                }, 5000);
            }

            // 切换到指定标签页
            function switchToTab(status) {
                const allTabs = document.querySelectorAll('.status-tab');
                const allSections = document.querySelectorAll('.order-section');

                // 更新标签状态
                allTabs.forEach(tab => tab.classList.remove('active'));
                document.querySelector(`.status-tab[data-status="${status}"]`).classList.add('active');

                // 更新内容显示
                allSections.forEach(section => {
                    section.classList.remove('active');
                    if (section.id === `${status}-orders`) {
                        section.classList.add('active');
                    }
                });

                // 加载对应状态订单数据
                loadOrdersByStatus(status);
            }

            // 加载订单数据的函数
            function loadOrdersByStatus(status) {
                console.log(`加载 ${status} 状态的订单数据`);

                const currentSection = document.getElementById(`${status}-orders`);

                // 显示加载状态
                currentSection.innerHTML = `
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>正在加载订单数据...</p>
                    </div>
                `;

                // 调用后端API加载订单数据
                fetch('@Url.Action("GetOrdersByStatus", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ status: status })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('网络响应不正常');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API响应:', data);
                    if (data.success) {
                        renderOrders(currentSection, data.orders, status);
                    } else {
                        showError(currentSection, data.message || '加载订单失败');
                    }
                })
                .catch(error => {
                    console.error('加载订单失败:', error);
                    showError(currentSection, '网络错误，请稍后重试');
                });
            }

            // 渲染订单列表
            function renderOrders(container, orders, status) {
                if (!orders || orders.length === 0) {
                    let emptyMessage = '';
                    let emptyIcon = 'fas fa-clipboard-list';

                    switch (status) {
                        case 'all':
                            emptyMessage = '您还没有创建任何回收预约订单';
                            break;
                        case 'pending':
                            emptyMessage = '您没有已预约的回收订单';
                            emptyIcon = 'fas fa-clock';
                            break;
                        case 'confirmed':
                            emptyMessage = '您没有进行中的回收订单';
                            emptyIcon = 'fas fa-check-circle';
                            break;
                        case 'completed':
                            emptyMessage = '您没有已完成的回收订单';
                            emptyIcon = 'fas fa-flag-checkered';
                            break;
                        case 'cancelled':
                            emptyMessage = '您没有已取消的回收订单';
                            emptyIcon = 'fas fa-times-circle';
                            break;
                    }

                    container.innerHTML = `
                        <div class="empty-state">
                            <i class="${emptyIcon}"></i>
                            <h3>${emptyMessage}</h3>
                            ${status === 'all' ? '<a href="@Url.Action("Appointment", "User")" class="btn-new-appointment"><i class="fas fa-calendar-plus"></i>立即预约</a>' : ''}
                        </div>
                    `;
                    return;
                }

                let ordersHTML = '<div class="order-list">';

                orders.forEach(order => {
                    // 根据订单状态显示不同的操作按钮
                    let actionButtons = '';

                    if (order.status === '待确认') {
                        // 待确认订单：查看详情 + 取消订单
                        actionButtons = `
                            <div class="order-actions">
                                <button class="btn-action primary" onclick="viewOrderDetail(${order.id})">
                                    <i class="fas fa-eye"></i>查看详情
                                </button>
                                <button class="btn-action danger" onclick="cancelOrder(${order.id}, '${order.number}')">
                                    <i class="fas fa-times"></i>取消订单
                                </button>
                            </div>
                        `;
                    } else if (order.status === '已取消') {
                        // 已取消订单：查看详情 + 再预约一单
                        actionButtons = `
                            <div class="order-actions">
                                <button class="btn-action primary" onclick="viewOrderDetail(${order.id})">
                                    <i class="fas fa-eye"></i>查看详情
                                </button>
                                <button class="btn-action success" onclick="reAppointment(${order.id})">
                                    <i class="fas fa-redo"></i>再预约一单
                                </button>
                            </div>
                        `;
                    } else if (order.status === '进行中') {
                        // 进行中订单：查看详情 + 联系回收员
                        actionButtons = `
                            <div class="order-actions">
                                <button class="btn-action primary" onclick="viewOrderDetail(${order.id})">
                                    <i class="fas fa-eye"></i>查看详情
                                </button>
                                <button class="btn-action success contact-recycler"
                            data-orderid="${order.id}"
                            data-recyclerid="${order.recyclerID || ''}">
                        <i class="fas fa-comments"></i>联系回收员
                    </button>
                            </div>
                        `;
                    }else {
                        // 其他状态订单：只显示查看详情
                        actionButtons = `
                            <div class="order-actions">
                                <button class="btn-action primary" onclick="viewOrderDetail(${order.id})">
                                    <i class="fas fa-eye"></i>查看详情
                                </button>
                            </div>
                        `;
                    }

                    ordersHTML += `
                        <div class="order-item" data-order-id="${order.id}">
                            <div class="order-header-info">
                                <div class="order-number">${order.number}</div>
                                <div class="order-status ${order.statusBadge}">${order.status}</div>
                            </div>

                            <div class="order-details">
                                <div class="detail-item">
                                    <span class="detail-label">预约类型</span>
                                    <span class="detail-value">${order.type}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">预约时间</span>
                                    <span class="detail-value">${order.date} ${order.timeSlot}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">预估重量</span>
                                    <span class="detail-value">${order.weight} 公斤</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">预估价格</span>
                                    <span class="detail-value">¥${order.price}</span>
                                </div>
                            </div>

                            ${order.categories && order.categories.length > 0 ? `
                            <div class="order-categories">
                                ${order.categories.map(cat => `<span class="category-tag">${cat}</span>`).join('')}
                            </div>
                            ` : ''}

                            ${actionButtons}
                        </div>
                    `;
                });

                ordersHTML += '</div>';
                container.innerHTML = ordersHTML;
            }

            // 显示错误信息
            function showError(container, message) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>加载失败</h3>
                        <p>${message}</p>
                        <button class="btn-action primary" onclick="loadOrdersByStatus('all')">
                            <i class="fas fa-redo"></i>重新加载
                        </button>
                    </div>
                `;
            }

            // 初始化加载全部订单
            loadOrdersByStatus('all');
        });

        // 取消订单函数
        function cancelOrder(orderId, orderNumber) {
            if (!confirm(`确定要取消订单 ${orderNumber} 吗？`)) {
                return;
            }

            // 显示加载状态
            const cancelBtn = event.target;
            const originalText = cancelBtn.innerHTML;
            cancelBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 取消中...';
            cancelBtn.disabled = true;

            fetch('@Url.Action("CancelOrder", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ appointmentId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('订单取消成功', 'success');
                    // 重新加载当前页面
                    location.reload();
                } else {
                    showAlert('取消失败：' + data.message, 'error');
                    cancelBtn.innerHTML = originalText;
                    cancelBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('取消订单失败:', error);
                showAlert('网络错误，请稍后重试', 'error');
                cancelBtn.innerHTML = originalText;
                cancelBtn.disabled = false;
            });
        }

        // 再预约一单功能
        function reAppointment(orderId) {
            if (confirm('确定要重新预约此订单吗？我们将为您跳转到预约页面。')) {
                window.location.href = '@Url.Action("Appointment", "User")';
            }
        }

        // 查看订单详情
        function viewOrderDetail(orderId) {
            const modal = $('#orderDetailModal');
            const loading = document.getElementById('modalLoading');
            const content = document.getElementById('modalContent');

            // 显示加载状态
            loading.style.display = 'block';
            content.style.display = 'none';

            fetch('@Url.Action("GetOrderDetail", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ appointmentId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                loading.style.display = 'none';

                if (data.success) {
                    renderOrderDetail(data.order, data.categories);
                    content.style.display = 'block';
                    modal.modal('show');
                } else {
                    alert('加载订单详情失败：' + data.message);
                }
            })
            .catch(error => {
                loading.style.display = 'none';
                alert('加载失败：' + error.message);
            });
        }

        // 渲染订单详情
        function renderOrderDetail(order, categories) {
            // 更新基本信息
            document.getElementById('modalOrderNumber').textContent = `订单详情 - ${order.number}`;
            document.getElementById('detailNumber').textContent = order.number;
            document.getElementById('detailType').textContent = order.type;
            document.getElementById('detailDateTime').textContent = `${order.date} ${order.timeSlot}`;
            document.getElementById('detailWeight').textContent = `${order.weight} 公斤`;
            document.getElementById('detailPrice').textContent = order.price ? `¥${order.price}` : '待评估';
            document.getElementById('detailStatus').textContent = order.status;
            document.getElementById('detailUrgent').textContent = order.isUrgent ? '是' : '否';

            // 更新联系信息
            document.getElementById('detailContactName').textContent = order.contactName;
            document.getElementById('detailContactPhone').textContent = order.contactPhone;
            document.getElementById('detailAddress').textContent = order.address;

            // 更新时间信息
            document.getElementById('detailCreatedDate').textContent = order.createdDate;
            document.getElementById('detailUpdatedDate').textContent = order.updatedDate;

            // 更新特殊要求
            const specialSection = document.getElementById('specialInstructionsSection');
            const specialInstructions = document.getElementById('detailSpecialInstructions');
            if (order.specialInstructions) {
                specialInstructions.textContent = order.specialInstructions;
                specialSection.style.display = 'block';
            } else {
                specialSection.style.display = 'none';
            }

            // 修复品类显示 - 处理不同的数据格式
            const categoriesContainer = document.getElementById('detailCategories');
            categoriesContainer.innerHTML = ''; // 清空容器

            if (categories) {
                console.log('原始品类数据:', categories); // 调试信息

                let categoryTags = '';

                // 情况1: categories 是字符串数组
                if (Array.isArray(categories) && categories.length > 0) {
                    categoryTags = categories.map(cat => {
                        if (typeof cat === 'string') {
                            return `<span class="category-tag">${cat}</span>`;
                        } else if (cat && cat.name) {
                            // 情况2: categories 是对象数组，有 name 属性
                            return `<span class="category-tag">${cat.name}</span>`;
                        } else {
                            // 情况3: 其他格式，尝试转换为字符串
                            return `<span class="category-tag">${String(cat)}</span>`;
                        }
                    }).join('');
                }
                // 情况4: categories 是逗号分隔的字符串
                else if (typeof categories === 'string' && categories.trim() !== '') {
                    const categoryArray = categories.split(',').map(cat => cat.trim()).filter(cat => cat !== '');
                    categoryTags = categoryArray.map(cat => `<span class="category-tag">${cat}</span>`).join('');
                }
                // 情况5: categories 是单个对象
                else if (categories && typeof categories === 'object' && categories.name) {
                    categoryTags = `<span class="category-tag">${categories.name}</span>`;
                }
                // 情况6: 从 order 对象中获取品类信息
                else if (order.categoryNames) {
                    const categoryArray = order.categoryNames.split(',').map(cat => cat.trim()).filter(cat => cat !== '');
                    categoryTags = categoryArray.map(cat => `<span class="category-tag">${cat}</span>`).join('');
                }
                else {
                    categoryTags = '<span class="text-muted">暂无品类信息</span>';
                }

                categoriesContainer.innerHTML = categoryTags;
            } else {
                categoriesContainer.innerHTML = '<span class="text-muted">暂无品类信息</span>';
            }
            // 新增：处理回收员ID显示（仅进行中/已完成状态）
            const recyclerIdElement = document.getElementById('detailRecyclerId');
            const recyclerIdValue = document.getElementById('recyclerID');

            // 判断订单状态，显示/隐藏回收员ID
            if (order.status === '进行中' || order.status === '已完成') {
                // 显示回收员ID（无值时显示“未分配”）
                recyclerIdValue.textContent = order.recyclerID || '未分配';
                recyclerIdElement.style.display = 'block';
            } else {
                // 其他状态（已预约/已取消）隐藏
                recyclerIdElement.style.display = 'none';
            }
        }
    </script>
}