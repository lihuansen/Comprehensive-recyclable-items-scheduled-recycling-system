@model recycling.Model.CategoryDetailViewModel

@{
    ViewBag.Title = "预约上门回收 - 第二步";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- 引入Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    .category-details-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 30px 20px;
    }

    .details-header {
        text-align: center;
        margin-bottom: 40px;
        padding-bottom: 15px;
    }

    .details-title {
        font-size: 32px;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 10px;
    }

    .details-subtitle {
        font-size: 16px;
        color: #7f8c8d;
    }

    .details-card {
        background: white;
        border-radius: 15px;
        padding: 40px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        margin-top: 20px;
        overflow: hidden;
    }

    .basic-info-summary {
        background: #e8f4fd;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 40px;
        clear: both;
    }

    .summary-title {
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
    }

        .summary-title i {
            margin-right: 10px;
            color: #3498db;
        }

    .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .summary-item {
        display: flex;
        flex-direction: column;
    }

    .summary-label {
        font-size: 12px;
        color: #7f8c8d;
        margin-bottom: 5px;
    }

    .summary-value {
        font-weight: 600;
        color: #2c3e50;
        word-wrap: break-word;
    }

    .category-section {
        margin-bottom: 40px;
        border: 2px solid #ecf0f1;
        border-radius: 10px;
        padding: 25px;
        background: #fafafa;
        clear: both;
    }

    .category-header {
        font-size: 20px;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

        .category-header i {
            margin-right: 10px;
            color: #e67e22;
        }

    .question-group {
        margin-bottom: 25px;
    }

    .question-text {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 15px;
        font-size: 16px;
    }

    .options-group {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .option-label {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 20px;
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        flex: 1;
        min-width: 120px;
    }

        .option-label:hover {
            border-color: #3498db;
            background: #e3f2fd;
        }

        .option-label.selected {
            border-color: #27ae60;
            background: #e8f5e8;
        }

        .option-label input[type="radio"] {
            width: 18px;
            height: 18px;
        }

    .price-section {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        border-radius: 10px;
        padding: 30px;
        color: white;
        text-align: center;
        margin: 40px 0;
        display: none;
        clear: both;
    }

    .price-visible {
        display: block;
    }

    .price-label {
        font-size: 16px;
        margin-bottom: 10px;
        opacity: 0.9;
    }

    .price-value {
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .price-note {
        font-size: 14px;
        opacity: 0.8;
    }

    .form-buttons {
        display: flex;
        gap: 15px;
        margin-top: 30px;
    }

    .btn-submit {
        flex: 1;
        height: 60px;
        background: linear-gradient(45deg, #27ae60, #2ecc71);
        border: none;
        border-radius: 10px;
        color: white;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .btn-back {
        flex: 1;
        height: 60px;
        background: #95a5a6;
        border: none;
        border-radius: 10px;
        color: white;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        text-decoration: none;
        white-space: nowrap;
    }

    .btn-calculate {
        flex: 1;
        height: 60px;
        background: linear-gradient(45deg, #3498db, #2980b9);
        border: none;
        border-radius: 10px;
        color: white;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

        .btn-submit:hover, .btn-calculate:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(39, 174, 96, 0.3);
        }

    .btn-back:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(149, 165, 166, 0.3);
        color: white;
        text-decoration: none;
    }

    .action-buttons, .pre-calculate-actions {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        width: 100%;
    }

    .error-message {
        background: #ffeaa7;
        border: 1px solid #fdcb6e;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
        color: #2d3436;
    }

    .success-message {
        background: #55efc4;
        border: 1px solid #00b894;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
        color: #2d3436;
    }

    @@media (max-width: 768px) {
        .category-details-container {
            padding: 20px;
        }

        .details-card {
            padding: 20px;
            margin-top: 10px;
        }

        .details-title {
            font-size: 24px;
        }

        .options-group {
            flex-direction: column;
        }

        .form-buttons, .action-buttons, .pre-calculate-actions {
            flex-direction: column;
        }

        .summary-grid {
            grid-template-columns: 1fr;
        }

        .basic-info-summary {
            margin-bottom: 30px;
        }
    }
</style>

<div class="category-details-container">
    <div class="details-header">
        <h1 class="details-title">
            <i class="fas fa-clipboard-list"></i>品类详细信息
        </h1>
        <p class="details-subtitle">步骤2/2：请根据实际情况回答问题，获得准确价格预估</p>
    </div>

    <div class="details-card">

        <!-- 错误消息提示 -->
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="error-message">
                <i class="fas fa-exclamation-triangle"></i> @TempData["ErrorMessage"]
            </div>
        }

        <!-- 成功消息提示 -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="success-message">
                <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            </div>
        }

        <!-- 基本信息摘要 -->
        <div class="basic-info-summary">
            <div class="summary-title">
                <i class="fas fa-info-circle"></i>预约信息摘要
            </div>
            <div class="summary-grid">
                <div class="summary-item">
                    <span class="summary-label">预约类型</span>
                    <span class="summary-value">
                        @{
                            var appointmentTypes = recycling.Model.AppointmentTypes.AllTypes;
                            var appointmentType = appointmentTypes.ContainsKey(Model.BasicInfo.AppointmentType) ?
                                appointmentTypes[Model.BasicInfo.AppointmentType] : Model.BasicInfo.AppointmentType;
                        }
                        @appointmentType
                    </span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">预估重量</span>
                    <span class="summary-value">@Model.BasicInfo.EstimatedWeight 公斤</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">预约时间</span>
                    <span class="summary-value">@Model.BasicInfo.AppointmentDate.ToString("yyyy年MM月dd日")</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">联系人</span>
                    <span class="summary-value">@Model.BasicInfo.ContactName</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">联系电话</span>
                    <span class="summary-value">@Model.BasicInfo.ContactPhone</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">回收品类</span>
                    <span class="summary-value">
                        @{
                            var allCategoryNames = recycling.Model.RecyclingCategories.AllCategories;
                            var selectedCategoryNames = Model.BasicInfo.SelectedCategories
                                .Where(c => allCategoryNames.ContainsKey(c))
                                .Select(c => allCategoryNames[c])
                                .ToList();
                        }
                        @string.Join("、", selectedCategoryNames)
                    </span>
                </div>
            </div>
        </div>

        <!-- 独立的返回按钮表单（不受计算表单限制） -->
        <div class="pre-calculate-actions">
            @using (Html.BeginForm("BackToAppointment", "User", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <button type="submit" class="btn-back">
                    <i class="fas fa-arrow-left"></i>上一步
                </button>
            }

            <!-- 计算价格表单 -->
            @using (Html.BeginForm("CategoryDetails", "User", FormMethod.Post, new { id = "categoryDetailsForm" }))
            {
                @Html.AntiForgeryToken()

                <!-- 动态生成品类问题 -->
                foreach (var categoryEntry in Model.CategoryQuestions)
                {
                    var category = categoryEntry.Key;
                    var categoryInfo = categoryEntry.Value;
                    var displayCategoryNames = recycling.Model.RecyclingCategories.AllCategories;
                    var categoryName = displayCategoryNames.ContainsKey(category) ? displayCategoryNames[category] : category;

                    <div class="category-section" data-category="@category">
                        <div class="category-header">
                            <i class="fas fa-box"></i>@categoryName - 详细信息
                        </div>

                        @for (int i = 0; i < categoryInfo.Questions.Count; i++)
                        {
                            var question = categoryInfo.Questions[i];

                            <div class="question-group">
                                <div class="question-text">@question.Text</div>
                                <div class="options-group">
                                    @foreach (var option in question.Options)
                                    {
                                        <label class="option-label">
                                            <input type="radio"
                                                   name="CategoryQuestions[@category].Questions[@i].SelectedValue"
                                                   value="@option.Value"
                                                   @(question.SelectedValue == option.Value ? "checked" : "")
                                                   required />
                                            <span>@option.Text</span>
                                        </label>
                                    }
                                </div>
                                <!-- 隐藏字段用于传递问题ID和权重 -->
                                <input type="hidden" name="CategoryQuestions[@category].Questions[@i].Id" value="@question.Id" />
                                <input type="hidden" name="CategoryQuestions[@category].Questions[@i].Weight" value="@question.Weight" />
                            </div>
                        }
                    </div>
                }

                <button type="submit" class="btn-calculate" id="calculateBtn">
                    <i class="fas fa-calculator"></i>计算预估价格
                </button>
            }
        </div>

        <!-- 价格显示区域 -->
        <div class="price-section @(Model.EstimatedPrice > 0 ? "price-visible" : "")" id="priceSection">
            <div class="price-label">预估回收价格</div>
            <div class="price-value">¥@Model.EstimatedPrice.ToString("F2")</div>
            <div class="price-note">
                <i class="fas fa-info-circle"></i>
                此为预估价格，实际价格以上门评估为准
                @if (Model.BasicInfo.IsUrgent)
                {
                    <br><i class="fas fa-bolt">已包含加急服务费用</i>
                    }
            </div>
        </div>

        <!-- 计算后的操作按钮区域 -->
        <div class="action-buttons" id="actionButtons" style="@(Model.EstimatedPrice > 0 ? "display:flex" : "display:none")">
            @using (Html.BeginForm("BackToAppointment", "User", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <button type="submit" class="btn-back">
                    <i class="fas fa-arrow-left"></i>返回上一步
                </button>
            }

            <!-- 修改后的提交预约表单 - 包含所有必要数据 -->
            @using (Html.BeginForm("SubmitAppointment", "User", FormMethod.Post, new { id = "submitAppointmentForm" }))
            {
                @Html.AntiForgeryToken()

                <!-- 隐藏字段传递最终价格 -->
                <input type="hidden" name="FinalEstimatedPrice" value="@Model.EstimatedPrice" />

                <!-- 隐藏字段传递所有品类问题答案 -->
                foreach (var categoryEntry in Model.CategoryQuestions)
                {
                    var category = categoryEntry.Key;
                    var categoryInfo = categoryEntry.Value;

                    for (int i = 0; i < categoryInfo.Questions.Count; i++)
                    {
                        var question = categoryInfo.Questions[i];
                        if (!string.IsNullOrEmpty(question.SelectedValue))
                        {
                            <input type="hidden"
                                   name="CategoryAnswers[@category].@question.Id"
                                   value="@question.SelectedValue" />
                        }
                    }
                }

                <button type="submit" class="btn-submit" id="submitBtn">
                    <i class="fas fa-paper-plane"></i>提交预约
                </button>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('CategoryDetails页面加载完成');

            // 选项选择样式
            const radioInputs = document.querySelectorAll('.option-label input[type="radio"]');
            radioInputs.forEach(radio => {
                radio.addEventListener('change', function () {
                    const label = this.closest('.option-label');
                    // 清除同组其他选项的选中样式
                    const groupName = this.name;
                    document.querySelectorAll(`input[name="${groupName}"]`).forEach(otherRadio => {
                        otherRadio.closest('.option-label').classList.remove('selected');
                    });
                    // 添加当前选项的选中样式
                    label.classList.add('selected');
                });

                // 初始化样式
                if (radio.checked) {
                    radio.closest('.option-label').classList.add('selected');
                }
            });

            // 计算表单提交处理
            const form = document.getElementById('categoryDetailsForm');
            const calculateBtn = document.getElementById('calculateBtn');

            if (form && calculateBtn) {
                form.addEventListener('submit', function (e) {
                    console.log('计算价格表单提交');

                    // 检查是否所有问题都已回答
                    const unansweredQuestions = document.querySelectorAll('.question-group input[type="radio"]:checked').length;
                    const totalQuestions = document.querySelectorAll('.question-group').length;

                    console.log(`已回答问题: ${unansweredQuestions}, 总问题: ${totalQuestions}`);

                    if (unansweredQuestions < totalQuestions) {
                        e.preventDefault();
                        alert('请回答所有问题后再计算价格');
                        return;
                    }

                    // 验证通过后禁用按钮
                    calculateBtn.disabled = true;
                    calculateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 计算中...';
                });
            }

            // 最终提交处理
            const submitBtn = document.getElementById('submitBtn');
            const submitForm = document.getElementById('submitAppointmentForm');

            if (submitBtn && submitForm) {
                submitForm.addEventListener('submit', function (e) {
                    console.log('提交预约表单提交');

                    // 检查隐藏字段数量
                    const hiddenFields = document.querySelectorAll('#submitAppointmentForm input[type="hidden"]');
                    console.log(`隐藏字段数量: ${hiddenFields.length}`);

                    // 禁用按钮显示加载状态
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 提交中...';

                    // 允许表单正常提交
                    return true;
                });
            }

            // 显示逻辑控制
            const priceSection = document.getElementById('priceSection');
            const actionButtons = document.getElementById('actionButtons');
            const preCalculateActions = document.querySelector('.pre-calculate-actions');

            if (priceSection && priceSection.classList.contains('price-visible')) {
                console.log('显示操作按钮');
                actionButtons.style.display = 'flex';
                if (preCalculateActions) {
                    preCalculateActions.style.display = 'none';
                }
            }

            // 自动隐藏消息提示
            setTimeout(function () {
                const messages = document.querySelectorAll('.error-message, .success-message');
                messages.forEach(msg => {
                    msg.style.transition = 'opacity 0.5s ease';
                    msg.style.opacity = '0';
                    setTimeout(() => msg.remove(), 500);
                });
            }, 5000);
        });
    </script>
}