@model recycling.Model.RegisterViewModel
@{
    ViewBag.Title = "用户注册";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // 判断是否注册成功（默认false）
    bool isRegisterSuccess = ViewBag.RegisterSuccess ?? false;
}

<link href="~/Content/register.css" rel="stylesheet" type="text/css" />

<!-- 1. 注册成功提示框（默认隐藏，成功时显示） -->
@if (isRegisterSuccess)
{
    <div style="
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 40px 60px;
        background-color: #dff0d8;
        border: 2px solid #3c763d;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    ">
        <h2 style="color: #3c763d; margin-bottom: 20px;">注册成功！</h2>
        <p style="font-size: 18px; color: #333;">请登录系统继续操作</p>
        <p style="font-size: 14px; color: #666; margin-top: 30px;">
            即将跳转至登录页... <span id="countdown">2</span> 秒
        </p>
    </div>

    <!-- 半透明遮罩（让提示框更突出，禁止操作其他元素） -->
    <div style="
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.3);
        z-index: 999;
    "></div>
}

<!-- 2. 原注册表单（注册成功时隐藏表单） -->
<div class="register-container" @(isRegisterSuccess ? "style='display: none;'" : "")>
    <h2 class="register-title">用户注册</h2>

    @* 显示错误信息 *@
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="error-message text-danger">
            @Html.ValidationSummary(true, "注册失败，请检查以下错误：", new { @class = "text-danger" })
        </div>
    }

    @using (Html.BeginForm("Register", "User", FormMethod.Post, new { id = "registerForm" }))
    {
        @Html.AntiForgeryToken()

        <!-- 1. 用户名（错误时保留值，无需修改） -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.Username, new
            {
                @class = "form-control",
                placeholder = "请输入用户名",
                required = "required"
            })
            @Html.ValidationMessageFor(m => m.Username, null, new { @class = "text-danger" })
        </div>

        <!-- 2. 密码（关键修改：用TextBoxFor+type="password"支持回显） -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.Password, new
            {
                @class = "form-control",
                placeholder = "请输入密码",
                required = "required",
                type = "password"
            })
            <button type="button" class="toggle-password" id="togglePassword">👁️</button>
            @Html.ValidationMessageFor(m => m.Password, null, new { @class = "text-danger" })
        </div>

        <!-- 3. 确认密码（同密码框修改） -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.ConfirmPassword, new
            {
                @class = "form-control",
                placeholder = "请再次输入密码",
                required = "required",
                type = "password"
            })
            <button type="button" class="toggle-password" id="toggleConfirmPassword">👁️</button>
            @Html.ValidationMessageFor(m => m.ConfirmPassword, null, new { @class = "text-danger" })
        </div>

        <!-- 4. 手机号（错误时保留值，无需修改） -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.PhoneNumber, new
            {
                @class = "form-control",
                placeholder = "请输入手机号",
                required = "required"
            })
            @Html.ValidationMessageFor(m => m.PhoneNumber, null, new { @class = "text-danger" })
        </div>

        <!-- 5. 邮箱（错误时保留值，无需修改） -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.Email, new
            {
                @class = "form-control",
                placeholder = "请输入邮箱",
                required = "required"
            })
            @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
        </div>

        <div class="register-buttons">
            <button type="submit" class="btn btn-primary btn-register">注册</button>
            <button type="button" class="btn btn-danger btn-cancel" id="cancelBtn">取消</button>
        </div>
    }
</div>

<script>
  // 3. 延迟跳转逻辑（仅注册成功时执行）
    @if (isRegisterSuccess)
    {
        <text>
            // 倒计时功能（可选，增强用户感知）
            let countdown = 2;
            const countdownEl = document.getElementById('countdown');
            const timer = setInterval(() => {
                countdown--;
                countdownEl.textContent = countdown;
                if (countdown <= 0) {
                    clearInterval(timer);
                    window.location.href = '@Url.Action("Login", "User")'; // 跳转登录页
                }
            }, 1000);

            // 保险起见：若定时器失效，3秒后强制跳转
            setTimeout(() => {
                window.location.href = '@Url.Action("Login", "User")';
            }, 3000);
        </text>
    }
    // 取消按钮跳转登录页
    document.getElementById('cancelBtn').addEventListener('click', function() {
        window.location.href = '@Url.Action("Login", "User")';
    });

    // 密码显示/隐藏切换（逻辑不变，适配修改后的输入框）
    function togglePasswordVisibility(inputId, buttonId) {
        const input = document.getElementById(inputId);
        const button = document.getElementById(buttonId);
        const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
        input.setAttribute('type', type);
        button.textContent = type === 'password' ? '👁️' : '👁️‍🗨️';
    }

    document.getElementById('togglePassword').addEventListener('click', function() {
        togglePasswordVisibility('Password', 'togglePassword');
    });

    document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
        togglePasswordVisibility('ConfirmPassword', 'toggleConfirmPassword');
    });
</script>