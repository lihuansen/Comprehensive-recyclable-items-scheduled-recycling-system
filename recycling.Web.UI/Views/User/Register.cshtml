@model recycling.Model.RegisterViewModel
@{
    ViewBag.Title = "用户注册";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/register.css" rel="stylesheet" type="text/css" />



<div class="register-container">
    <h2 class="text-center">用户注册</h2>

    @* 显示错误信息 *@
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="error-message text-danger">
            @Html.ValidationSummary(true, "注册失败，请检查以下错误：", new { @class = "text-danger" })
        </div>
    }

    @using (Html.BeginForm("Register", "User", FormMethod.Post, new { id = "registerForm" }))
    {
        @Html.AntiForgeryToken()

        <!-- 用户名 -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.Username, new
            {
                @class = "form-control",
                placeholder = "请输入用户名",
                required = "required"
            })
            @Html.ValidationMessageFor(m => m.Username, null, new { @class = "text-danger" })
        </div>

        <!-- 密码 -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.Password, new
            {
                @class = "form-control",
                placeholder = "请输入密码",
                required = "required",
                type = "password"
            })
            <button type="button" class="toggle-password" id="togglePassword">👁️</button>
            @Html.ValidationMessageFor(m => m.Password, null, new { @class = "text-danger" })
        </div>

        <!-- 确认密码 -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.ConfirmPassword, new
            {
                @class = "form-control",
                placeholder = "请再次输入密码",
                required = "required",
                type = "password"
            })
            <button type="button" class="toggle-password" id="toggleConfirmPassword">👁️</button>
            @Html.ValidationMessageFor(m => m.ConfirmPassword, null, new { @class = "text-danger" })
        </div>

        <!-- 手机号 -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.PhoneNumber, new
            {
                @class = "form-control",
                placeholder = "请输入手机号",
                required = "required"
            })
            @Html.ValidationMessageFor(m => m.PhoneNumber, null, new { @class = "text-danger" })
        </div>

        <!-- 邮箱 -->
        <div class="form-group">
            @Html.TextBoxFor(m => m.Email, new
            {
                @class = "form-control",
                placeholder = "请输入邮箱",
                required = "required"
            })
            @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
        </div>

        <div class="register-buttons">
            <button type="submit" class="btn btn-primary btn-register">注册</button>
            <button type="button" class="btn btn-danger btn-cancel" id="cancelBtn">取消</button>
        </div>
    }
</div>

<!-- 5. 纯客户端JS（无任何Razor嵌入，彻底隔离） -->
<script>
        // 取消按钮跳转
        document.getElementById('cancelBtn').addEventListener('click', function () {
            window.location.href = loginUrl;
        });

        // 密码显示/隐藏切换
        function togglePasswordVisibility(inputId, buttonId) {
            const input = document.getElementById(inputId);
            const button = document.getElementById(buttonId);
            const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
            input.setAttribute('type', type);
            button.textContent = type === 'password' ? '👁️' : '👁️‍🗨️';
        }

        document.getElementById('togglePassword').addEventListener('click', function () {
            togglePasswordVisibility('Password', 'togglePassword');
        });

        document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
            togglePasswordVisibility('ConfirmPassword', 'toggleConfirmPassword');
        });
    });
</script>