@model recycling.Model.LoginViewModel

@{
    ViewBag.Title = "用户登录";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var loginType = ViewBag.LoginType ?? "password";
}

<!-- 引入Font Awesome用于眼睛图标 -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="~/Content/login.css" rel="stylesheet" type="text/css" />

<div class="login-container">
    <h2 class="login-title">用户登录</h2>

    <!-- 显示后端验证错误 -->
    @Html.ValidationSummary(true, "登录失败，请检查以下问题：", new { @class = "validation-summary-errors" })

    <!-- 用户登录区域 -->
    <div id="userLoginArea">
        <!-- 登录方式链接 -->
        <div class="login-links">
            <a href="@Url.Action("Login", "User")" id="passwordLogin" class="@(loginType == "password" ? "active" : "")">密码登录</a>
            <a href="@Url.Action("PhoneLogin", "User")" id="phoneLogin" class="@(loginType == "phone" ? "active" : "")">手机号登录</a>
            <a href="@Url.Action("EmailLogin", "User")" id="emailLogin" class="@(loginType == "email" ? "active" : "")">邮箱登录</a>
            <a href="@Url.Action("Forgot", "User")" id="forgotPassword">忘记密码</a>
            <a href="@Url.Action("Register", "User")" id="goToRegister">前往注册</a>
        </div>

        <!-- 密码登录表单 - 使用强类型绑定 -->
        <div id="passwordForm" class="login-form @(loginType == "password" ? "active" : "")">
            @using (Html.BeginForm("Login", "User", FormMethod.Post, new { id = "passwordLoginForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.LabelFor(m => m.Username)
                    @Html.TextBoxFor(m => m.Username, new
                    {
                        @class = "form-control",
                        placeholder = "请输入用户名",
                        required = "required"
                    })
                    @Html.ValidationMessageFor(m => m.Username, null, new { @class = "field-validation-error" })
                </div>

                <!-- 密码输入框添加小眼睛图标 -->
                <div class="form-group password-group">
                    @Html.LabelFor(m => m.Password)
                    <div class="password-input-container">
                        @Html.PasswordFor(m => m.Password, new
                        {
                            @class = "form-control password-input",
                            placeholder = "请输入密码",
                            required = "required",
                            id = "passwordInput"
                        })
                        <button type="button" class="toggle-password" id="togglePassword">
                            <i class="fas fa-eye-slash" aria-hidden="true"></i>
                        </button>
                    </div>
                    @Html.ValidationMessageFor(m => m.Password, null, new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Captcha)
                    <div class="captcha-container">
                        @Html.TextBoxFor(m => m.Captcha, new
                        {
                            @class = "form-control captcha-input",
                            placeholder = "请输入验证码",
                            maxlength = 4,
                            required = "required"
                        })
                        @Html.ValidationMessageFor(m => m.Captcha, null, new { @class = "field-validation-error" })

                        <div class="captcha-image" id="captchaImage" title="点击刷新验证码">
                        </div>
                    </div>
                    @Html.HiddenFor(m => m.GeneratedCaptcha, new { id = "generatedCaptcha" })
                </div>

                <div class="login-buttons">
                    <button type="submit" class="btn btn-primary btn-login">登录</button>
                    <a href="@Url.Action("LoginSelect", "Home")" class="btn btn-cancel">取消</a>
                </div>
            }
        </div>

        <!-- 手机号登录表单 -->
        <div id="phoneForm" class="login-form @(loginType == "phone" ? "active" : "")">
            <form id="phoneLoginForm">
                <div class="form-group">
                    <input type="text" class="form-control" id="phoneUsername" placeholder="请输入用户名" required>
                </div>

                <div class="form-group">
                    <input type="text" class="form-control" id="phoneNumber" placeholder="请输入手机号" required>
                </div>

                <div class="form-group">
                    <input type="text" class="form-control" id="phoneCode" placeholder="请输入手机验证码" required>
                    <button type="button" class="send-code-btn" id="sendPhoneCode">发送验证码</button>
                </div>

                <div class="login-buttons">
                    <button type="submit" class="btn btn-primary btn-login">登录</button>
                </div>
            </form>
        </div>

        <!-- 邮箱登录表单 -->
        <div id="emailForm" class="login-form @(loginType == "email" ? "active" : "")">
            <form id="emailLoginForm">
                <div class="form-group">
                    <input type="text" class="form-control" id="emailUsername" placeholder="请输入用户名" required>
                </div>

                <div class="form-group">
                    <input type="email" class="form-control" id="emailAddress" placeholder="请输入邮箱" required>
                </div>

                <div class="form-group">
                    <input type="text" class="form-control" id="emailCode" placeholder="请输入邮箱验证码" required>
                    <button type="button" class="send-code-btn" id="sendEmailCode">发送验证码</button>
                </div>

                <div class="login-buttons">
                    <button type="submit" class="btn btn-primary btn-login">登录</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // 验证码字符集（移除容易混淆的字符：0和O，1和I，l）
    const captchaChars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';

    // 生成随机验证码
    function generateCaptcha() {
        let captcha = '';
        for (let i = 0; i < 4; i++) {
            const randomIndex = Math.floor(Math.random() * captchaChars.length);
            captcha += captchaChars[randomIndex];
        }
        return captcha;
    }

    // 刷新用户登录验证码
    function refreshCaptcha() {
        const captcha = generateCaptcha();
        const captchaElement = document.getElementById('captchaImage');
        const hiddenField = document.getElementById('generatedCaptcha');

        if (captchaElement && hiddenField) {
            captchaElement.textContent = captcha;
            hiddenField.value = captcha;

            // 添加随机颜色效果增强安全性
            const colors = ['#333', '#e74c3c', '#27ae60', '#3498db', '#8e44ad', '#f39c12'];
            captchaElement.style.color = colors[Math.floor(Math.random() * colors.length)];

            // 清空输入框
            document.getElementById('@Html.IdFor(m => m.Captcha)').value = '';
        }
    }

    // 密码显示/隐藏切换功能
    function setupPasswordToggle(toggleBtnId, passwordInputId) {
        const toggleBtn = document.getElementById(toggleBtnId);
        const passwordInput = document.getElementById(passwordInputId);

        if (toggleBtn && passwordInput) {
            toggleBtn.addEventListener('click', function() {
                // 切换密码可见性
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);

                // 切换图标
                const icon = this.querySelector('i');
                if (type === 'password') {
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                } else {
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                }
            });
        }
    }

    // 页面加载时初始化
    document.addEventListener('DOMContentLoaded', function() {
        // 初始化验证码
        refreshCaptcha();

        // 初始化密码显示/隐藏功能
        setupPasswordToggle('togglePassword', 'passwordInput');

        // 绑定验证码点击刷新事件
        document.getElementById('captchaImage').addEventListener('click', refreshCaptcha);

        // 处理验证错误后的验证码刷新
        @if (!ViewData.ModelState.IsValid)
        {
            bool hasCaptchaError = ViewData.ModelState.Values.Any(v => v.Errors.Any(e => e.ErrorMessage.Contains("验证码")));
            if (hasCaptchaError)
            {
                @:refreshCaptcha();
            }
        }

        // 密码登录表单提交验证
        const passwordForm = document.getElementById('passwordLoginForm');
        if (passwordForm) {
            passwordForm.addEventListener('submit', function(e) {
                const userInput = document.getElementById('@Html.IdFor(m => m.Captcha)').value;
                const generatedCaptcha = document.getElementById('generatedCaptcha').value;

                // 客户端先验证一次，提升用户体验
                if (!userInput) {
                    alert('请输入验证码');
                    e.preventDefault();
                    return false;
                }

                if (userInput.toUpperCase() !== generatedCaptcha.toUpperCase()) {
                    alert('验证码不正确，请重新输入');
                    refreshCaptcha();
                    e.preventDefault();
                    return false;
                }

                return true;
            });
        }
    });

    // 发送手机验证码
    document.getElementById('sendPhoneCode').addEventListener('click', function() {
        const phoneNumber = document.getElementById('phoneNumber').value;
        const phoneRegex = /^1[3-9]\d{9}$/;

        if (!phoneNumber) {
            alert('请输入手机号');
            return;
        }

        if (!phoneRegex.test(phoneNumber)) {
            alert('请输入正确的手机号格式');
            return;
        }

        this.disabled = true;
        this.textContent = '60秒后重新发送';
        this.classList.add('disabled');

        let countdown = 60;
        const timer = setInterval(function() {
            countdown--;
            document.getElementById('sendPhoneCode').textContent = countdown + '秒后重新发送';

            if (countdown <= 0) {
                clearInterval(timer);
                document.getElementById('sendPhoneCode').disabled = false;
                document.getElementById('sendPhoneCode').textContent = '发送验证码';
                document.getElementById('sendPhoneCode').classList.remove('disabled');
            }
        }, 1000);

        // 实际项目中这里应该有AJAX请求发送验证码
        console.log(`向手机号 ${phoneNumber} 发送验证码`);
    });

    // 发送邮箱验证码
    document.getElementById('sendEmailCode').addEventListener('click', function() {
        const emailAddress = document.getElementById('emailAddress').value;
        const emailRegex = /^[^\s]+[^\s]+\.[^\s]+$/;

        if (!emailAddress) {
            alert('请输入邮箱');
            return;
        }

        if (!emailRegex.test(emailAddress)) {
            alert('请输入正确的邮箱格式');
            return;
        }

        this.disabled = true;
        this.textContent = '60秒后重新发送';
        this.classList.add('disabled');

        let countdown = 60;
        const timer = setInterval(function() {
            countdown--;
            document.getElementById('sendEmailCode').textContent = countdown + '秒后重新发送';

            if (countdown <= 0) {
                clearInterval(timer);
                document.getElementById('sendEmailCode').disabled = false;
                document.getElementById('sendEmailCode').textContent = '发送验证码';
                document.getElementById('sendEmailCode').classList.remove('disabled');
            }
        }, 1000);

        // 实际项目中这里应该有AJAX请求发送验证码
        console.log(`向邮箱 ${emailAddress} 发送验证码`);
    });

    // 其他登录方式提交处理
    document.getElementById('phoneLoginForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const username = document.getElementById('phoneUsername').value;
        const phone = document.getElementById('phoneNumber').value;
        const code = document.getElementById('phoneCode').value;

        if (!username) {
            alert('请输入用户名');
            return;
        }

        if (!phone) {
            alert('请输入手机号');
            return;
        }

        if (!code) {
            alert('请输入手机验证码');
            return;
        }

        // 实际项目中这里应该有AJAX登录请求
        alert('手机号登录功能即将实现');
    });

    document.getElementById('emailLoginForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const username = document.getElementById('emailUsername').value;
        const email = document.getElementById('emailAddress').value;
        const code = document.getElementById('emailCode').value;

        if (!username) {
            alert('请输入用户名');
            return;
        }

        if (!email) {
            alert('请输入邮箱');
            return;
        }

        if (!code) {
            alert('请输入邮箱验证码');
            return;
        }

        // 实际项目中这里应该有AJAX登录请求
        alert('邮箱登录功能即将实现');
    });
</script>