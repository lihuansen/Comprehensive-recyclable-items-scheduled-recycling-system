@model recycling.Model.LoginViewModel

@{
    ViewBag.Title = "用户登录";
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
    var loginType = ViewBag.LoginType ?? "password";
}

<div class="login-container">
    <h2 class="login-title">登录</h2>

    <!-- 后端验证错误 -->
    @Html.ValidationSummary(true, "登录失败，请检查以下问题：", new { @class = "validation-summary-errors" })

    <!-- 角色选择 -->
    <div class="role-selection">
        <div class="role-options">
            <div class="role-option">
                <input type="radio" id="roleUser" name="userRole" value="user" checked>
                <label for="roleUser">用户</label>
            </div>
            <div class="role-option">
                <input type="radio" id="roleStaff" name="userRole" value="staff">
                <label for="roleStaff">工作人员</label>
            </div>
        </div>

        <!-- 工作人员角色下拉框（用户视图中默认隐藏） -->
        <div class="staff-role-dropdown" id="staffRoleDropdown">
            <select id="staffRole">
                <option value="collector">回收员</option>
                <option value="admin">管理员</option>
                <option value="superadmin">超级管理员</option>
            </select>
        </div>
    </div>

    <!-- 用户登录区域 -->
    <div id="userLoginArea">
        <!-- 登录方式切换链接 -->
        <div class="login-links">
            <a href="javascript:switchLoginType('password')" id="passwordLogin" class="@(loginType == "password" ? "active" : "")">密码登录</a>
            <a href="javascript:switchLoginType('phone')" id="phoneLogin" class="@(loginType == "phone" ? "active" : "")">手机号登录</a>
            <a href="javascript:switchLoginType('email')" id="emailLogin" class="@(loginType == "email" ? "active" : "")">邮箱登录</a>
            <a href="@Url.Action("Forgot", "User")" id="forgotPassword">忘记密码</a>
            <a href="@Url.Action("Register", "User")" id="goToRegister">前往注册</a>
        </div>

        <!-- 密码登录表单 -->
        <div id="passwordForm" class="login-form @(loginType == "password" ? "active" : "")">
            @using (Html.BeginForm("Login", "User", FormMethod.Post, new { id = "passwordLoginForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.LabelFor(m => m.Username)
                    @Html.TextBoxFor(m => m.Username, new
                    {
                        @class = "form-control",
                        placeholder = "请输入用户名",
                        required = "required"
                    })
                    @Html.ValidationMessageFor(m => m.Username, null, new { @class = "field-validation-error" })
                </div>

                <div class="form-group password-group">
                    @Html.LabelFor(m => m.Password)
                    <div class="password-input-container">
                        @Html.PasswordFor(m => m.Password, new
                        {
                            @class = "form-control password-input",
                            placeholder = "请输入密码",
                            required = "required",
                            id = "passwordInput"
                        })
                        <button type="button" class="toggle-password" id="togglePassword">
                            <i class="fas fa-eye-slash" aria-hidden="true"></i>
                        </button>
                    </div>
                    @Html.ValidationMessageFor(m => m.Password, null, new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Captcha)
                    <div class="captcha-container">
                        @Html.TextBoxFor(m => m.Captcha, new
                        {
                            @class = "form-control captcha-input",
                            placeholder = "请输入验证码",
                            maxlength = 4,
                            required = "required"
                        })
                        @Html.ValidationMessageFor(m => m.Captcha, null, new { @class = "field-validation-error" })

                        <div class="captcha-image" id="captchaImage" title="点击刷新验证码">
                        </div>
                    </div>
                    @Html.HiddenFor(m => m.GeneratedCaptcha, new { id = "generatedCaptcha" })
                </div>

                <div class="login-buttons">
                    <button type="submit" class="btn btn-primary btn-login">登录</button>
                    <button type="button" class="btn btn-danger btn-cancel" id="cancelBtn" onclick="goToHome()">取消</button>
                </div>
            }
        </div>

        <!-- 手机号登录表单 -->
        <div id="phoneForm" class="login-form @(loginType == "phone" ? "active" : "")">
            <form id="phoneLoginForm">
                <div class="form-group">
                    <input type="text" class="form-control" id="phoneUsername" placeholder="请输入用户名" required>
                </div>

                <div class="form-group">
                    <input type="text" class="form-control" id="phoneNumber" placeholder="请输入手机号" required>
                </div>

                <div class="form-group">
                    <input type="text" class="form-control" id="phoneCode" placeholder="请输入手机验证码" required>
                    <button type="button" class="send-code-btn" id="sendPhoneCode">发送验证码</button>
                </div>

                <div class="login-buttons">
                    <button type="submit" class="btn btn-primary btn-login">登录</button>
                    <button type="button" class="btn btn-danger btn-cancel" id="cancelBtn2" onclick="goToHome()">取消</button>
                </div>
            </form>
        </div>

        <!-- 邮箱登录表单 -->
        <div id="emailForm" class="login-form @(loginType == "email" ? "active" : "")">
            <form id="emailLoginForm">
                <div class="form-group">
                    <input type="text" class="form-control" id="emailUsername" placeholder="请输入用户名" required>
                </div>

                <div class="form-group">
                    <input type="email" class="form-control" id="emailAddress" placeholder="请输入邮箱" required>
                </div>

                <div class="form-group">
                    <input type="text" class="form-control" id="emailCode" placeholder="请输入邮箱验证码" required>
                    <button type="button" class="send-code-btn" id="sendEmailCode">发送验证码</button>
                </div>

                <div class="login-buttons">
                    <button type="submit" class="btn btn-primary btn-login">登录</button>
                    <button type="button" class="btn btn-danger btn-cancel" id="cancelBtn3" onclick="goToHome()">取消</button>
                </div>
            </form>
        </div>
    </div>

    <!-- 工作人员登录区域（用户视图中默认隐藏，通过角色切换显示） -->
    <div id="staffLoginArea" class="staff-login-form">
        @Html.Partial("~/Views/Staff/Login.cshtml")
    </div>
</div>

@section Scripts {
    <script>
        // 刷新用户验证码
        window.refreshCaptcha = function() {
            const captcha = generateCaptcha();
            const captchaElement = document.getElementById('captchaImage');
            const hiddenField = document.getElementById('generatedCaptcha');
            if (captchaElement && hiddenField) {
                captchaElement.textContent = captcha;
                hiddenField.value = captcha;
                const colors = ['#333', '#e74c3c', '#27ae60', '#3498db', '#8e44ad', '#f39c12'];
                captchaElement.style.color = colors[Math.floor(Math.random() * colors.length)];
                document.getElementById('@Html.IdFor(m => m.Captcha)').value = '';
            }
        }

        // 切换用户登录方式
        function switchLoginType(type) {
            // 隐藏所有表单
            document.getElementById('passwordForm').classList.remove('active');
            document.getElementById('phoneForm').classList.remove('active');
            document.getElementById('emailForm').classList.remove('active');

            // 更新链接激活状态
            document.getElementById('passwordLogin').classList.remove('active');
            document.getElementById('phoneLogin').classList.remove('active');
            document.getElementById('emailLogin').classList.remove('active');

            // 显示选中的表单
            document.getElementById(`${type}Form`).classList.add('active');
            document.getElementById(`${type}Login`).classList.add('active');

            // 刷新验证码（仅密码登录需要）
            if (type === 'password') {
                refreshCaptcha();
            }
        }

        // 页面初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化验证码
            refreshCaptcha();

            // 初始化密码切换
            setupPasswordToggle('togglePassword', 'passwordInput');

            // 绑定验证码刷新事件
            document.getElementById('captchaImage').addEventListener('click', refreshCaptcha);

            // 验证错误时刷新验证码
            @if (!ViewData.ModelState.IsValid)
            {
                bool hasCaptchaError = ViewData.ModelState.Values.Any(v => v.Errors.Any(e => e.ErrorMessage.Contains("验证码")));
                if (hasCaptchaError)
                {
                    @:refreshCaptcha();
                }
            }

            // 密码登录表单验证
            document.getElementById('passwordLoginForm').addEventListener('submit', function(e) {
                const userInput = document.getElementById('@Html.IdFor(m => m.Captcha)').value;
                const generated = document.getElementById('generatedCaptcha').value;
                if (!userInput) {
                    alert('请输入验证码');
                    e.preventDefault();
                    return false;
                }
                if (userInput.toUpperCase() !== generated.toUpperCase()) {
                    alert('验证码不正确');
                    refreshCaptcha();
                    e.preventDefault();
                    return false;
                }
                return true;
            });

            // 手机号验证码逻辑
            document.getElementById('sendPhoneCode').addEventListener('click', function() {
                const phone = document.getElementById('phoneNumber').value;
                const regex = /^1[3-9]\d{9}$/;
                if (!phone) {
                    alert('请输入手机号');
                    return;
                }
                if (!regex.test(phone)) {
                    alert('手机号格式错误');
                    return;
                }
                this.disabled = true;
                this.textContent = '60秒后重新发送';
                let countdown = 60;
                const timer = setInterval(() => {
                    countdown--;
                    this.textContent = `${countdown}秒后重新发送`;
                    if (countdown <= 0) {
                        clearInterval(timer);
                        this.disabled = false;
                        this.textContent = '发送验证码';
                    }
                }, 1000);
                console.log(`发送验证码到 ${phone}`);
            });

            // 邮箱验证码逻辑
            document.getElementById('sendEmailCode').addEventListener('click', function() {
                const email = document.getElementById('emailAddress').value;
                const regex = /^[^\s]+[^\s]+\.[^\s]+$/;
                if (!email) {
                    alert('请输入邮箱');
                    return;
                }
                if (!regex.test(email)) {
                    alert('邮箱格式错误');
                    return;
                }
                this.disabled = true;
                this.textContent = '60秒后重新发送';
                let countdown = 60;
                const timer = setInterval(() => {
                    countdown--;
                    this.textContent = `${countdown}秒后重新发送`;
                    if (countdown <= 0) {
                        clearInterval(timer);
                        this.disabled = false;
                        this.textContent = '发送验证码';
                    }
                }, 1000);
                console.log(`发送验证码到 ${email}`);
            });

            // 手机登录表单提交
            document.getElementById('phoneLoginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const username = document.getElementById('phoneUsername').value;
                const phone = document.getElementById('phoneNumber').value;
                const code = document.getElementById('phoneCode').value;
                if (!username || !phone || !code) {
                    alert('请完善信息');
                    return;
                }
                alert('手机号登录功能待实现');
            });

            // 邮箱登录表单提交
            document.getElementById('emailLoginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const username = document.getElementById('emailUsername').value;
                const email = document.getElementById('emailAddress').value;
                const code = document.getElementById('emailCode').value;
                if (!username || !email || !code) {
                    alert('请完善信息');
                    return;
                }
                alert('邮箱登录功能待实现');
            });
        });
    </script>
}
